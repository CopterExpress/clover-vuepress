import{_ as i,r as p,o as r,c as l,a as s,b as a,w as c,F as u,e,d as n}from"./app.4f6a4bec.js";import{_ as d,a as k,b as h,c as _}from"./rcw-0001.9baff33f.js";const g={},m=e('<h1 id="working-with-the-ultrasonic-distance-gage" tabindex="-1"><a class="header-anchor" href="#working-with-the-ultrasonic-distance-gage" aria-hidden="true">#</a> Working with the ultrasonic distance gage</h1><p>Ultrasonic distance gage (<em>&quot;sonar&quot;</em>) is a distance gage based on the principle of measuring the time of a sound wave (about 40 kHz) propagation to the obstacle and back. The sonar can measure the distance up to 1.5 \u2013 3 m with the accuracy of several centimeters.</p><h2 id="distance-gage-hc-sr04" tabindex="-1"><a class="header-anchor" href="#distance-gage-hc-sr04" aria-hidden="true">#</a> Distance gage HC-SR04</h2><img src="'+d+'" alt="hc-sr04" width="200"><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>The distance gage is attached to the body using double-sided tape. For obtaining acceptable results, the use of vibro-insulation is required. A piece of PU foam may be used for vibro-insulation.</p><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> Connection</h3><p>Connect HC-SR04 to Raspberry Pi according to the connection diagram. Use 1.0 and 2.2 k\u03A9 resistors and any free GPIO pins, e.g., 23 and 24:</p><img src="'+k+'" alt="Connecting HC-SR04" height="600"><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Instead of a 2.2 k\u03A9 resistor, you can use two 1 k\u03A9 resistors connected in series.</p></div>',10),f={class:"custom-container tip"},b=s("p",{class:"custom-container-title"},"TIP",-1),y=n("There are several interchangeable pins "),w=s("strong",null,"GND",-1),v=n(" and "),x=s("strong",null,"VCC 5V",-1),T=n(" on Raspberry Pi. Use the [pinout] ("),C={href:"https://pinout.xyz",target:"_blank",rel:"noopener noreferrer"},R=n("https://pinout.xyz"),I=n(") to find them."),P=s("h3",{id:"reading-the-data",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#reading-the-data","aria-hidden":"true"},"#"),n(" Reading the data")],-1),E=n("To read the data from distance gage HC-SR04 library for working with "),G=s("abbr",{title:"General-Purpose Input/Output"},"GPIO",-1),H=n(" is used \u2013 "),O={href:"http://abyz.me.uk/rpi/pigpio/index.html",target:"_blank",rel:"noopener noreferrer"},S=s("code",null,"pigpio",-1),U=n(". This library is pre-installed in the "),N=n("Clover image"),z=n(", starting with version "),A=s("strong",null,"v0.14",-1),F=n(". For older versions of the image, use "),L={href:"http://abyz.me.uk/rpi/pigpio/download.html",target:"_blank",rel:"noopener noreferrer"},V=n("an installation guide"),D=n("."),q=e(`<p>To work with <code>pigpio</code>, start appropriate daemon:</p><div class="language-text ext-text"><pre class="language-text"><code>sudo systemctl start pigpiod.service
</code></pre></div><p>You can also enable <code>pigpiod</code> auto launch on system startup:</p><div class="language-text ext-text"><pre class="language-text"><code>sudo systemctl enable pigpiod.service
</code></pre></div><p>Thus, it becomes possible to interact with the <code>pigpiod</code> daemon from Python:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> pigpio
pi <span class="token operator">=</span> pigpio<span class="token punctuation">.</span>pi<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,6),B={class:"custom-container tip"},W=s("p",{class:"custom-container-title"},"TIP",-1),K=n("See detailed description of Python API in "),M={href:"http://abyz.me.uk/rpi/pigpio/python.html",target:"_blank",rel:"noopener noreferrer"},Y=s("code",null,"pigpio",-1),j=n(" documentation"),J=n("."),Q=e(`<p>An example of the code for reading data from HC-SR04:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> time
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> pigpio

TRIG <span class="token operator">=</span> <span class="token number">23</span>  <span class="token comment"># pin connected to the Trig pin of the sonar</span>
ECHO <span class="token operator">=</span> <span class="token number">24</span>  <span class="token comment"># pin connected to the Echo pin of the sonar</span>

pi <span class="token operator">=</span> pigpio<span class="token punctuation">.</span>pi<span class="token punctuation">(</span><span class="token punctuation">)</span>
done <span class="token operator">=</span> threading<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">rise</span><span class="token punctuation">(</span>gpio<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tick<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> high
    high <span class="token operator">=</span> tick

<span class="token keyword">def</span> <span class="token function">fall</span><span class="token punctuation">(</span>gpio<span class="token punctuation">,</span> level<span class="token punctuation">,</span> tick<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> low
    low <span class="token operator">=</span> tick <span class="token operator">-</span> high
    done<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">read_distance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> low
    done<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>
    pi<span class="token punctuation">.</span>gpio_trigger<span class="token punctuation">(</span>TRIG<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> done<span class="token punctuation">.</span>wait<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> low <span class="token operator">/</span> <span class="token number">58.0</span> <span class="token operator">/</span> <span class="token number">100.0</span>

pi<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span>TRIG<span class="token punctuation">,</span> pigpio<span class="token punctuation">.</span>OUTPUT<span class="token punctuation">)</span>
pi<span class="token punctuation">.</span>set_mode<span class="token punctuation">(</span>ECHO<span class="token punctuation">,</span> pigpio<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>
pi<span class="token punctuation">.</span>callback<span class="token punctuation">(</span>ECHO<span class="token punctuation">,</span> pigpio<span class="token punctuation">.</span>RISING_EDGE<span class="token punctuation">,</span> rise<span class="token punctuation">)</span>
pi<span class="token punctuation">.</span>callback<span class="token punctuation">(</span>ECHO<span class="token punctuation">,</span> pigpio<span class="token punctuation">.</span>FALLING_EDGE<span class="token punctuation">,</span> fall<span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token comment"># Reading the distance:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>read_distance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

</code></pre></div><h3 id="filtering-the-data" tabindex="-1"><a class="header-anchor" href="#filtering-the-data" aria-hidden="true">#</a> Filtering the data</h3>`,3),X=n("To filter (smooth out) the data and delete "),Z={href:"https://en.wikipedia.org/wiki/Outlier",target:"_blank",rel:"noopener noreferrer"},$=n("outliers"),nn=n(", "),sn={href:"https://en.wikipedia.org/wiki/Kalman_filter",target:"_blank",rel:"noopener noreferrer"},an=n("Kalman filter"),tn=n(" or a simple "),en={href:"https://en.wikipedia.org/wiki/Median_filter",target:"_blank",rel:"noopener noreferrer"},on=n("median filter"),pn=n(" can be used. An example of median filtering implementation:"),cn=e(`<div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> collections
<span class="token keyword">import</span> numpy

<span class="token comment"># ...</span>

history <span class="token operator">=</span> collections<span class="token punctuation">.</span>deque<span class="token punctuation">(</span>maxlen<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token comment"># 10 - number of samples for averaging</span>

<span class="token keyword">def</span> <span class="token function">read_distance_filtered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>read_distance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> numpy<span class="token punctuation">.</span>median<span class="token punctuation">(</span>history<span class="token punctuation">)</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>read_distance_filtered<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>An example of charts of initial and filtered data:</p><img src="`+h+'">',3),rn=n("The source code of the ROS-node used for building the chart can be found "),ln={href:"https://gist.github.com/okalachev/feb2d7235f5c9636802c3cda43add253",target:"_blank",rel:"noopener noreferrer"},un=n("on Gist"),dn=n("."),kn=e('<h2 id="distance-gage-rcw-0001" tabindex="-1"><a class="header-anchor" href="#distance-gage-rcw-0001" aria-hidden="true">#</a> Distance gage RCW-0001</h2><img src="'+_+'" width="200"><p>Ultrasonic distance gage RCW-0001 is compatible with distance gage HC-SR04. Use the instruction above to connect and work with it.</p><h2 id="flight" tabindex="-1"><a class="header-anchor" href="#flight" aria-hidden="true">#</a> Flight</h2>',4),hn=n("An example of a flight program with the use of "),_n=n("simple_offboard"),gn=n(", which makes the copter fly forward until the connected ultrasonic distance gage detects an obstacle:"),mn=e(`<div class="language-python ext-py"><pre class="language-python"><code>set_velocity<span class="token punctuation">(</span>vx<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> auto_arm<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># flying forward at the velocity of 0.5 mps</span>

<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> read_distance_filtered<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token comment"># if the obstacle is closer than 1 m, hanging on the spot</span>
        set_position<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
    rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
</code></pre></div>`,1);function fn(bn,yn){const t=p("ExternalLinkIcon"),o=p("RouterLink");return r(),l(u,null,[m,s("div",f,[b,s("p",null,[y,w,v,x,T,s("a",C,[R,a(t)]),I])]),P,s("p",null,[E,G,H,s("a",O,[S,a(t)]),U,a(o,{to:"/en/image.html"},{default:c(()=>[N]),_:1}),z,A,F,s("a",L,[V,a(t)]),D]),q,s("div",B,[W,s("p",null,[K,s("a",M,[Y,j,a(t)]),J])]),Q,s("p",null,[X,s("a",Z,[$,a(t)]),nn,s("a",sn,[an,a(t)]),tn,s("a",en,[on,a(t)]),pn]),cn,s("p",null,[rn,s("a",ln,[un,a(t)]),dn]),kn,s("p",null,[hn,a(o,{to:"/en/simple_offboard.html"},{default:c(()=>[_n]),_:1}),gn]),mn],64)}var xn=i(g,[["render",fn],["__file","sonar.html.vue"]]);export{xn as default};
