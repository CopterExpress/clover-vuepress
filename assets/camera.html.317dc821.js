import{_ as r,r as c,o as i,c as l,a as n,b as s,w as p,F as u,d as a,e}from"./app.4f6a4bec.js";const d={},k=n("h1",{id:"working-with-the-camera",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#working-with-the-camera","aria-hidden":"true"},"#"),a(" Working with the camera")],-1),_={class:"custom-container tip"},h=n("p",{class:"custom-container-title"},"TIP",-1),m=a("In the image version "),g=n("strong",null,"0.20",-1),v=a(),b=n("code",null,"clever",-1),f=a(" package was renamed to "),y=n("code",null,"clover",-1),w=a(". See "),x={href:"https://github.com/CopterExpress/clover/blob/v0.19/docs/en/camera.md",target:"_blank",rel:"noopener noreferrer"},q=a("previous version of the article"),C=a(" for older images."),T=e(`<p>Make sure the camera is enabled in the <code>~/catkin_ws/src/clover/clover/launch/clover.launch</code> file:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main_camera<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div>`,2),I=a("Also make sure that "),O=a("position and orientation of the camera"),P=a(" is correct."),R=n("p",null,[a("The "),n("code",null,"clover"),a(" service must be restarted after the launch-file has been edited:")],-1),V=n("div",{class:"language-text ext-text"},[n("pre",{class:"language-text"},[n("code",null,`sudo systemctl restart clover
`)])],-1),B=a("You may use rqt or "),S=a("web_video_server"),A=a(" to view the camera stream."),z=n("h2",{id:"troubleshooting",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#troubleshooting","aria-hidden":"true"},"#"),a(" Troubleshooting")],-1),F=a("If the camera stream is missing, try using the "),E={href:"https://www.raspberrypi.org/documentation/usage/camera/raspicam/raspistill.md",target:"_blank",rel:"noopener noreferrer"},L=n("code",null,"raspistill",-1),N=a(" utility to check whether the camera works."),Q=e(`<p>First, stop the <code>clover</code> service:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl stop clover
</code></pre></div><p>Then use <code>raspistill</code> to capture an image from the camera:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>raspistill -o test.jpg
</code></pre></div><p>If it doesn&#39;t work, check the camera cable connections and the cable itself. Replace the cable if it is damaged. Also, make sure the camera screws don&#39;t touch any components on the camera board.</p><h2 id="camera-parameters" tabindex="-1"><a class="header-anchor" href="#camera-parameters" aria-hidden="true">#</a> Camera parameters</h2>`,6),U=a("Some camera parameters, such as image size, FPS cap, and exposure, may be configured in the "),j=n("code",null,"main_camera.launch",-1),D=a(" file. The list of supported parameters can be found "),M={href:"https://github.com/OTL/cv_camera#parameters",target:"_blank",rel:"noopener noreferrer"},W=a("in the cv_camera repository"),H=a("."),X=a("Additionally you can specify an arbitrary capture parameter using its "),Y={href:"https://docs.opencv.org/3.3.1/d4/d15/group__videoio__flags__base.html",target:"_blank",rel:"noopener noreferrer"},Z=a("OpenCV code"),G=a(". For example, add the following parameters to the camera node to set exposition manually:"),J=e(`<div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>property_0_code<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>21<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- property code 21 is CAP_PROP_AUTO_EXPOSURE --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>property_0_value<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.25<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- property values are normalized as per OpenCV specs, even for &quot;menu&quot; controls; 0.25 means &quot;use manual exposure&quot; --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cv_cap_prop_exposure<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.3<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- set exposure to 30% of maximum value --&gt;</span>
</code></pre></div><h2 id="computer-vision" tabindex="-1"><a class="header-anchor" href="#computer-vision" aria-hidden="true">#</a> Computer vision</h2>`,2),K=a("The "),$=a("SD card image"),aa=a(" comes with a preinstalled "),na={href:"https://opencv.org",target:"_blank",rel:"noopener noreferrer"},sa=a("OpenCV"),ta=a(" library, which is commonly used for various computer vision-related tasks. Additional libraries for converting from ROS messages to OpenCV images and back are preinstalled as well."),ea=n("h3",{id:"python",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#python","aria-hidden":"true"},"#"),a(" Python")],-1),oa=a("Main article: "),pa={href:"http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython",target:"_blank",rel:"noopener noreferrer"},ca=a("http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython"),ra=a("."),ia=e(`<p>An example of creating a subscriber for a topic with an image from the main camera for processing with OpenCV:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">import</span> cv2
<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image
<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge

rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;computer_vision_sample&#39;</span><span class="token punctuation">)</span>
bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">image_callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cv_image <span class="token operator">=</span> bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;bgr8&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># OpenCV image</span>
    <span class="token comment"># Do any image processing with cv2...</span>

image_sub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">&#39;main_camera/image_raw&#39;</span><span class="token punctuation">,</span> Image<span class="token punctuation">,</span> image_callback<span class="token punctuation">)</span>

rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>To debug image processing, you can publish a separate topic with the processed image:</p><div class="language-python ext-py"><pre class="language-python"><code>image_pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">&#39;~debug&#39;</span><span class="token punctuation">,</span> Image<span class="token punctuation">)</span>
</code></pre></div><p>Publishing the processed image (at the end of the image_callback function):</p><div class="language-python ext-py"><pre class="language-python"><code>image_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>bridge<span class="token punctuation">.</span>cv2_to_imgmsg<span class="token punctuation">(</span>cv_image<span class="token punctuation">,</span> <span class="token string">&#39;bgr8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div>`,6),la=a("The obtained images can be viewed using "),ua=a("web_video_server"),da=a("."),ka=e(`<h4 id="retrieving-one-frame" tabindex="-1"><a class="header-anchor" href="#retrieving-one-frame" aria-hidden="true">#</a> Retrieving one frame</h4><p>It&#39;s possibly to retrieve one camera frame at a time. This method works slower than normal topic subscribing and should not be used when it&#39;s necessary to process camera images continuously.</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image
<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge

rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;computer_vision_sample&#39;</span><span class="token punctuation">)</span>
bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment"># ...</span>

<span class="token comment"># Retrieve a frame:</span>
img <span class="token operator">=</span> bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>wait_for_message<span class="token punctuation">(</span><span class="token string">&#39;main_camera/image_raw&#39;</span><span class="token punctuation">,</span> Image<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;bgr8&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="examples" tabindex="-1"><a class="header-anchor" href="#examples" aria-hidden="true">#</a> Examples</h3><h4 id="working-with-qr-codes" tabindex="-1"><a class="header-anchor" href="#working-with-qr-codes" aria-hidden="true">#</a> Working with QR codes</h4>`,5),_a={class:"custom-container tip"},ha=n("p",{class:"custom-container-title"},"TIP",-1),ma=a("For high-speed recognition and positioning, it is better to use "),ga=a("ArUco markers"),va=a("."),ba=a("To program actions of the copter for the detection of "),fa={href:"https://en.wikipedia.org/wiki/QR_code",target:"_blank",rel:"noopener noreferrer"},ya=a("QR codes"),wa=a(" you can use the "),xa={href:"https://pypi.org/project/pyzbar/",target:"_blank",rel:"noopener noreferrer"},qa=a("pyZBar"),Ca=a(". This lib is installed in the last image for Raspberry Pi."),Ta=e(`<p>QR codes recognition in Python:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">from</span> pyzbar <span class="token keyword">import</span> pyzbar
<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridge
<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image

bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>

rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;barcode_test&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># Image subscriber callback function</span>
<span class="token keyword">def</span> <span class="token function">image_callback</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    cv_image <span class="token operator">=</span> bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token string">&#39;bgr8&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># OpenCV image</span>
    barcodes <span class="token operator">=</span> pyzbar<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>cv_image<span class="token punctuation">)</span>
    <span class="token keyword">for</span> barcode <span class="token keyword">in</span> barcodes<span class="token punctuation">:</span>
        b_data <span class="token operator">=</span> barcode<span class="token punctuation">.</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">&quot;utf-8&quot;</span><span class="token punctuation">)</span>
        b_type <span class="token operator">=</span> barcode<span class="token punctuation">.</span><span class="token builtin">type</span>
        <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> w<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">=</span> barcode<span class="token punctuation">.</span>rect
        xc <span class="token operator">=</span> x <span class="token operator">+</span> w<span class="token operator">/</span><span class="token number">2</span>
        yc <span class="token operator">=</span> y <span class="token operator">+</span> h<span class="token operator">/</span><span class="token number">2</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Found {} with data {} with center at x={}, y={}&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>b_type<span class="token punctuation">,</span> b_data<span class="token punctuation">,</span> xc<span class="token punctuation">,</span> yc<span class="token punctuation">)</span><span class="token punctuation">)</span>

image_sub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">&#39;main_camera/image_raw&#39;</span><span class="token punctuation">,</span> Image<span class="token punctuation">,</span> image_callback<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>

rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div>`,2),Ia=a("The script will take up to 100% CPU capacity. To slow down the script artificially, you can use "),Oa={href:"http://wiki.ros.org/topic_tools/throttle",target:"_blank",rel:"noopener noreferrer"},Pa=a("throttling"),Ra=a(" of frames from the camera, for example, at 5 Hz ("),Va=n("code",null,"main_camera.launch",-1),Ba=a("):"),Sa=e(`<div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>topic_tools<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>cam_throttle<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>throttle<span class="token punctuation">&quot;</span></span>
    <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>messages main_camera/image_raw 5.0 main_camera/image_raw_throttled<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>The topic for the subscriber in this case should be changed for <code>main_camera/image_raw_throttled</code>.</p><h2 id="video-recording" tabindex="-1"><a class="header-anchor" href="#video-recording" aria-hidden="true">#</a> Video recording</h2>`,3),Aa=a("To record a video you can use "),za={href:"http://wiki.ros.org/image_view#image_view.2Fdiamondback.video_recorder",target:"_blank",rel:"noopener noreferrer"},Fa=n("code",null,"video_recorder",-1),Ea=a(" node from "),La=n("code",null,"image_view",-1),Na=a(" package:"),Qa=n("div",{class:"language-bash ext-sh"},[n("pre",{class:"language-bash"},[n("code",null,[a("rosrun image_view video_recorder image:"),n("span",{class:"token operator"},"="),a(`/main_camera/image_raw
`)])])],-1),Ua=n("p",null,[a("The video file will be saved to a file "),n("code",null,"output.avi"),a(". The "),n("code",null,"image"),a(" argument contains the name of the topic to record.")],-1);function ja(Da,Ma){const t=c("ExternalLinkIcon"),o=c("RouterLink");return i(),l(u,null,[k,n("div",_,[h,n("p",null,[m,g,v,b,f,y,w,n("a",x,[q,s(t)]),C])]),T,n("p",null,[I,s(o,{to:"/en/camera_setup.html"},{default:p(()=>[O]),_:1}),P]),R,V,n("p",null,[B,s(o,{to:"/en/web_video_server.html"},{default:p(()=>[S]),_:1}),A]),z,n("p",null,[F,n("a",E,[L,s(t)]),N]),Q,n("p",null,[U,j,D,n("a",M,[W,s(t)]),H]),n("p",null,[X,n("a",Y,[Z,s(t)]),G]),J,n("p",null,[K,s(o,{to:"/en/image.html"},{default:p(()=>[$]),_:1}),aa,n("a",na,[sa,s(t)]),ta]),ea,n("p",null,[oa,n("a",pa,[ca,s(t)]),ra]),ia,n("p",null,[la,s(o,{to:"/en/web_video_server.html"},{default:p(()=>[ua]),_:1}),da]),ka,n("div",_a,[ha,n("p",null,[ma,s(o,{to:"/en/aruco.html"},{default:p(()=>[ga]),_:1}),va])]),n("p",null,[ba,n("a",fa,[ya,s(t)]),wa,n("a",xa,[qa,s(t)]),Ca]),Ta,n("p",null,[Ia,n("a",Oa,[Pa,s(t)]),Ra,Va,Ba]),Sa,n("p",null,[Aa,n("a",za,[Fa,s(t)]),Ea,La,Na]),Qa,Ua],64)}var Ha=r(d,[["render",ja],["__file","camera.html.vue"]]);export{Ha as default};
