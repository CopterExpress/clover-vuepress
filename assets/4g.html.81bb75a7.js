import{_ as r,r as i,o as l,c as d,a as e,b as o,w as c,F as p,e as n,d as t}from"./app.4f6a4bec.js";import{_ as h,a as u,b as m,c as g,d as f,e as v}from"./video_stream.112b6993.js";const _={},y=n('<h1 id="multi-copter-control-with-4g-communication" tabindex="-1"><a class="header-anchor" href="#multi-copter-control-with-4g-communication" aria-hidden="true">#</a> Multi-copter control with 4G communication</h1><p>The fourth generation mobile communication is a convenient tool for transmitting and receiving information at high speed. Nowadays, the coverage area of mobile operators allows to connect to the Internet at high speed from almost any point.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>To transfer any data from your drone to the ground control station (e.g., QGroundControl) and back, you need to set up your own VPN network.</p></div><h2 id="connecting-4g-modem-to-raspberry-pi" tabindex="-1"><a class="header-anchor" href="#connecting-4g-modem-to-raspberry-pi" aria-hidden="true">#</a> Connecting 4G modem to Raspberry Pi</h2><p>Connect a 4G modem with SIM card to the USB port of your Raspberry Pi.</p><p>When connected, some modems recognize in the system as a network card, without any additional settings.</p><p>4G modem example: <em>USB 4G Huawei E3372H</em></p><img src="'+h+`" width="300" class="zoom center border"><p>But some other popular modems, for instance <em>Quectel EP06</em>, do not start the internet connection automatic. In this case you should use utilities like <code>qmi-network</code> and <code>udhcpc</code>. To install this utilities enter the appropriate command line:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libqmi-utils udhcpc
</code></pre></div><p>Next to start the internet connection proceed following:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> wwan0 down
<span class="token builtin class-name">echo</span> <span class="token string">&#39;Y&#39;</span> <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /sys/class/net/wwan0/qmi/raw_ip
<span class="token function">sudo</span> <span class="token function">ip</span> <span class="token function">link</span> <span class="token builtin class-name">set</span> wwan0 up
<span class="token function">sudo</span> qmi-network /dev/cdc-wdm0 start
<span class="token function">sudo</span> udhcpc -q -f -i wwan0
</code></pre></div>`,12),b=t("Reed more about it in "),k={href:"https://docs.sixfab.com/page/setting-up-a-data-connection-over-qmi-interface-using-libqmi",target:"_blank",rel:"noopener noreferrer"},w=t("this article"),x=t("."),P=n(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>To check the internet connection enter the appropriate command line:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">ping</span> -I wwan0 -c <span class="token number">5</span> <span class="token number">8.8</span>.8.8
</code></pre></div></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>To check the speed of the internet connection you could use the <code>speedtest</code> utility:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> speedtest-cli
speedtest
</code></pre></div></div><h2 id="connecting-raspberry-pi-to-the-vpn" tabindex="-1"><a class="header-anchor" href="#connecting-raspberry-pi-to-the-vpn" aria-hidden="true">#</a> Connecting Raspberry Pi to the VPN</h2><p>Create the VPN network keys to connect Raspberry Pi and the ground station.</p><p>To connect Raspberry Pi to your network, install the OpenVPN package:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openvpn
</code></pre></div><p>Move your keys to the <code>/etc/openvpn/client</code> directory. For convenience, use the graphical SFTP data transfer interface, for example: WinSCP, FileZilla, etc.</p><p>To enable the client mode, you must activate the keys you have transmitted. Keys can be generated in various formats, for example: <code>.ovpn</code>, <code>.conf</code>. The key or configuration used on your copter should be strictly in <code>.conf</code> format.</p><p>Initialize the service that uses your keys to connect in client mode:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> openvpn-client@config-name
</code></pre></div><p>where <em>config-name</em> is the name of your configuration file.</p><p>If everything is done correctly, every time the system restarts, the service client will automatically connect to your network.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Before starting work, do not forget to set up and enable VPN connection on your PC.</p></div>`,13),T={class:"custom-container tip"},I=e("p",{class:"custom-container-title"},"TIP",-1),C=t("Alternatively we recommend to use the "),q=t("ZeroTier"),S=t(" VPN-service."),N=e("h2",{id:"copter-control-via-qgroundcontrol",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#copter-control-via-qgroundcontrol","aria-hidden":"true"},"#"),t(" Copter control via QGroundControl")],-1),R=e("div",{class:"custom-container tip"},[e("p",{class:"custom-container-title"},"TIP"),e("p",null,"We suggest using the UDP transfer protocol to control the drone, which provides less delay, at the cost of no guarantee of receiving the package, which is very important during the flight.")],-1),V=e("p",null,"Make sure your copter and ground station are connected to your network.",-1),G=e("p",null,[t("To do this, you can use the command "),e("code",null,"ip addr"),t(". The result will be a numbered list of the active networks enabled on your device. Note the connection with the prefix "),e("em",null,"tun"),t(" and the IP address you specify; if it is present in your list, your copter is connected to the network.")],-1),z=t("Set up the GCS connection to your drone using the same protocol that is used for your VPN network. The steps are the same as in the "),B=t("Wi-Fi connection article"),E=t(". We recommend using "),j=e("em",null,"UDP",-1),D=t(" due to lower latency."),F=n('<p>If you have a connection to your drone, connect some joystick to your PC. You may use an RC transmitter with a USB port, such as FlySky-i6X, Taranis x7, etc., as well as any analog joystick that is recognized by the system.</p><p>When the joystick is recognized by the system, the <em>Joystick</em> item will appear in the <em>Vehicle Setup</em> column. If it is highlighted in red, then calibration is required.</p><p>To calibrate the joystick, press the <em>Calibrate</em> button in the <em>Joystick</em> tab and follow the instructions for the sticks position on the left side of the window.</p><div class="image-group"><img src="'+u+'" width="300" class="zoom border"><img src="'+m+'" width="300" class="zoom border"></div><p>After successful calibration, flight modes must be set up. To do this, switch the required toggle switches several times. During switching, you will see the virtual channels on which the toggle switches operate. One of the channels will be highlighted in the active position.</p><img src="'+g+'" width="300" class="zoom center border"><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>When selecting the joystick, check the number of working channels and its support in QGroundControl (which uses SDL2, so any joystick supported there should be fine). There are joysticks that support only 4 channels, which are not convenient for this type of control.</p></div><p>If changes to stick positions are reflected in the QGroundControl window, all you have to do is apply a parameter that specifies that the drone is controlled by the joystick, not by the RC:</p><p><code>COM_RC_IN_MODE</code> - Joystick/No RC Checks</p><p>Since mobile communication is not always stable, it is recommended to increase the timeout for control signal loss to 5 seconds.</p><img src="'+f+'" width="300" class="zoom center border"><p>The drone is ready to fly!</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If the copter does not arm when you move the left stick to the bottom right corner, set the Arm/Disarm command to one of the switches.</p></div><h2 id="streaming-video-from-the-camera-to-qgroundcontrol" tabindex="-1"><a class="header-anchor" href="#streaming-video-from-the-camera-to-qgroundcontrol" aria-hidden="true">#</a> Streaming video from the camera to QGroundControl</h2>',14),M=t("You can stream video from almost any camera connected to your Raspberry Pi. You will need to install or "),W={href:"https://github.com/sfalexrog/gst-rtsp-launch",target:"_blank",rel:"noopener noreferrer"},Q=t("build"),U=t(" the "),A=e("em",null,"gst-rtsp-launch",-1),Y=t(" package:"),L=n(`<div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> update
<span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> gst-rtsp-launch
</code></pre></div><p>To start the transfer of images, you must enter the appropriate command line:</p><p><a id="command_line"></a></p><div class="language-bash ext-sh"><pre class="language-bash"><code>gst-rtsp-launch <span class="token string">&quot;( v4l2src device=/dev/video0 ! video/x-raw,framerate=30/1,width=320,height=240 ! videoconvert ! v4l2h264enc output-io-mode=4 extra-controls=<span class="token entity" title="\\&quot;">\\&quot;</span>encode,frame_level_rate_control_enable=1,h264_profile=4,h264_level=13,video_bitrate=300000,h264_i_frame_period=5;<span class="token entity" title="\\&quot;">\\&quot;</span> ! rtph264pay name=pay0 pt=96 )&quot;</span>
</code></pre></div>`,4),O=t("This command line contains the parameters of the video stream, such as the source video device, framerate, image height/width, encoding, etc. You can see more examples "),J={href:"https://github.com/sfalexrog/gst-rtsp-launch/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"},H=t("in the "),Z=e("code",null,"gst-rtsp-launch",-1),K=t(" repository"),X=t("."),$=n('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>A Raspberry Pi camera device <code>/dev/video0</code> could be used by <code>clover</code> systemd service. In this case <code>gst-rtsp-launch</code> will not get an access to the device. For stop the <code>clover</code> run command <code>sudo systemctl stop clover</code>. Also you could stream from a USB-camera, for this change the source video device to <code>/dev/video1</code>.</p></div><p>Make sure the stream by the address <code>rtsp://192.168.11.1:8554/video</code> (the IP-address of your Raspberry Pi could be different) is received and shown in QGroundControl.</p><img src="'+v+`" width="300" class="zoom center border"><h2 id="starting-video-stream-automatically" tabindex="-1"><a class="header-anchor" href="#starting-video-stream-automatically" aria-hidden="true">#</a> Starting video stream automatically</h2><p>Create a file and add your video stream <a href="#command_line">command line</a>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">nano</span> script_name.sh
</code></pre></div><p>In order to run the file, you have to mark it as executable.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">chmod</span> a+x script_name.sh
</code></pre></div><p>You can use systemd to launch this script every time on system startup. Create the <code>qgc_video.service</code> file in the <code>/etc/systemd/system</code> directory:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/systemd/system/qgc_video.service
</code></pre></div><p>Put the following in this file:</p><div class="language-text ext-text"><pre class="language-text"><code>[Unit]
Description=VideoStream

[Service]
ExecStart=/bin/bash /home/pi/script_name.sh

[Install]
WantedBy=multi-user.target
</code></pre></div><p>Enable the script at startup.</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> qgc_video.service
</code></pre></div>`,14);function ee(te,oe){const s=i("ExternalLinkIcon"),a=i("RouterLink");return l(),d(p,null,[y,e("p",null,[b,e("a",k,[w,o(s)]),x]),P,e("div",T,[I,e("p",null,[C,o(a,{to:"/en/zerotire_vpn.html"},{default:c(()=>[q]),_:1}),S])]),N,R,V,G,e("p",null,[z,o(a,{to:"/en/gcs_bridge.html"},{default:c(()=>[B]),_:1}),E,j,D]),F,e("p",null,[M,e("a",W,[Q,o(s)]),U,A,Y]),L,e("p",null,[O,e("a",J,[H,Z,K,o(s)]),X]),$],64)}var ae=r(_,[["render",ee],["__file","4g.html.vue"]]);export{ae as default};
