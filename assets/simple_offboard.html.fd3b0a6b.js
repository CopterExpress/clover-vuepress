import{_ as l,r as p,o as i,c as r,a,b as s,w as e,F as d,d as n,e as o}from"./app.4f6a4bec.js";const u={},h=a("h1",{id:"autonomous-flight",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#autonomous-flight","aria-hidden":"true"},"#"),n(" Autonomous flight")],-1),_=n("The "),k=a("code",null,"simple_offboard",-1),m=n(" module of the "),g=a("code",null,"clover",-1),y=n(" package is intended for simplified programming of the autonomous drone flight ("),f=a("code",null,"OFFBOARD",-1),v=n(),b=n("flight mode"),w=n("). It allows setting the desired flight tasks, and automatically transforms "),x=n("coordinates between frames"),z=n("."),F=a("code",null,"simple_offboard",-1),P=n(" is a high level system for interacting with the flight controller. For a more low level system, see "),N=n("mavros"),A=n("."),S=o(`<p>Main services are <a href="#gettelemetry"><code>get_telemetry</code></a> (receive telemetry data), <a href="#navigate"><code>navigate</code></a> (fly to a given point along a straight line), <a href="#navigateglobal"><code>navigate_global</code></a> (fly to a point specified as latitude and longitude along a straight line), <a href="#land"><code>land</code></a> (switch to landing mode).</p><h2 id="python-usage" tabindex="-1"><a class="header-anchor" href="#python-usage" aria-hidden="true">#</a> Python usage</h2><p>You need to create proxies for services before calling them. Use the following template for your programs:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">from</span> clover <span class="token keyword">import</span> srv
<span class="token keyword">from</span> std_srvs<span class="token punctuation">.</span>srv <span class="token keyword">import</span> Trigger

rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;flight&#39;</span><span class="token punctuation">)</span> <span class="token comment"># &#39;flight&#39; is name of your ROS node</span>

get_telemetry <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;get_telemetry&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>GetTelemetry<span class="token punctuation">)</span>
navigate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;navigate&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>Navigate<span class="token punctuation">)</span>
navigate_global <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;navigate_global&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>NavigateGlobal<span class="token punctuation">)</span>
set_position <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;set_position&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>SetPosition<span class="token punctuation">)</span>
set_velocity <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;set_velocity&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>SetVelocity<span class="token punctuation">)</span>
set_attitude <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;set_attitude&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>SetAttitude<span class="token punctuation">)</span>
set_rates <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;set_rates&#39;</span><span class="token punctuation">,</span> srv<span class="token punctuation">.</span>SetRates<span class="token punctuation">)</span>
land <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;land&#39;</span><span class="token punctuation">,</span> Trigger<span class="token punctuation">)</span>
</code></pre></div><p>Unused proxy functions may be removed from the code.</p><h2 id="api-description" tabindex="-1"><a class="header-anchor" href="#api-description" aria-hidden="true">#</a> API description</h2><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Omitted numeric parameters are set to 0.</p></div><h3 id="get-telemetry" tabindex="-1"><a class="header-anchor" href="#get-telemetry" aria-hidden="true">#</a> get_telemetry</h3><p>Obtains complete telemetry of the drone.</p><p>Parameters:</p>`,10),T=a("code",null,"frame_id",-1),O=n(" \u2013 "),D=n("frame"),I=o(" for values <code>x</code>, <code>y</code>, <code>z</code>, <code>vx</code>, <code>vy</code>, <code>vz</code>. Example: <code>map</code>, <code>body</code>, <code>aruco_map</code>. Default value: <code>map</code>.",21),R=a("p",null,"Response format:",-1),L=a("li",null,[a("code",null,"frame_id"),n(" \u2014 frame;")],-1),q=a("li",null,[a("code",null,"connected"),n(" \u2013 whether there is a connection to "),a("abbr",{title:"Flight Control Unit flight controller"},"FCU"),n(";")],-1),B=a("li",null,[a("code",null,"armed"),n(" - drone arming state (armed if true);")],-1),U=a("code",null,"mode",-1),C=n(" \u2013 current "),G=n("flight mode"),E=n(";"),V=a("li",null,[a("code",null,"x, y, z"),n(" \u2014 local position of the drone "),a("em",null,"(m)"),n(";")],-1),M=a("code",null,"lat, lon",-1),W=n(" \u2013 drone latitude and longitude "),X=a("em",null,"(degrees)",-1),j=n(", requires "),H=n("GPS"),Y=n(" module;"),Z=a("code",null,"alt",-1),J=n(" \u2013 altitude in the global coordinate system (according to "),K={href:"https://ru.wikipedia.org/wiki/WGS_84",target:"_blank",rel:"noopener noreferrer"},Q=n("WGS-84"),$=n(" standard, not "),nn=a("abbr",{title:"Above Mean Sea Level"},"AMSL",-1),an=n("!), requires "),sn=n("GPS"),tn=n(" module;"),en=o("<li><code>vx, vy, vz</code> \u2013 drone velocity <em>(m/s)</em>;</li><li><code>pitch</code> \u2013 pitch angle <em>(radians)</em>;</li><li><code>roll</code> \u2013 roll angle <em>(radians)</em>;</li><li><code>yaw</code> \u2014 yaw angle <em>(radians)</em>;</li><li><code>pitch_rate</code> \u2014 angular pitch velocity <em>(rad/s)</em>;</li><li><code>roll_rate</code> \u2013 angular roll velocity <em>(rad/s)</em>;</li><li><code>yaw_rate</code> \u2013 angular yaw velocity <em>(rad/s)</em>;</li><li><code>voltage</code> \u2013 total battery voltage <em>(V)</em>;</li><li><code>cell_voltage</code> \u2013 battery cell voltage <em>(V)</em>.</li>",9),on=o(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Fields that are unavailable for any reason will contain the <code>NaN</code> value.</p></div><p>Displaying drone coordinates <code>x</code>, <code>y</code> and <code>z</code> in the local system of coordinates:</p><div class="language-python ext-py"><pre class="language-python"><code>telemetry <span class="token operator">=</span> get_telemetry<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>telemetry<span class="token punctuation">.</span>x<span class="token punctuation">,</span> telemetry<span class="token punctuation">.</span>y<span class="token punctuation">,</span> telemetry<span class="token punctuation">.</span>z<span class="token punctuation">)</span>
</code></pre></div>`,3),pn=n("Displaying drone altitude relative to "),cn=n("the ArUco map"),ln=n(":"),rn=o(`<div class="language-python ext-py"><pre class="language-python"><code>telemetry <span class="token operator">=</span> get_telemetry<span class="token punctuation">(</span>frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_map&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>telemetry<span class="token punctuation">.</span>z<span class="token punctuation">)</span>
</code></pre></div><p>Checking global position availability:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> math
<span class="token keyword">if</span> <span class="token keyword">not</span> math<span class="token punctuation">.</span>isnan<span class="token punctuation">(</span>get_telemetry<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lat<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Global position is available&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;No global position&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Output of current telemetry (command line):</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rosservice call /get_telemetry <span class="token string">&quot;{frame_id: &#39;&#39;}&quot;</span>
</code></pre></div><h3 id="navigate" tabindex="-1"><a class="header-anchor" href="#navigate" aria-hidden="true">#</a> navigate</h3><p>Fly to the designated point in a straight line.</p><p>Parameters:</p>`,8),dn=o("<li><code>x</code>, <code>y</code>, <code>z</code> \u2014 coordinates <em>(m)</em>;</li><li><code>yaw</code> \u2014 yaw angle <em>(radians)</em>;</li><li><code>yaw_rate</code> \u2013 angular yaw velocity (will be used if yaw is set to <code>NaN</code>) <em>(rad/s)</em>;</li><li><code>speed</code> \u2013 flight speed (setpoint speed) <em>(m/s)</em>;</li><li><code>auto_arm</code> \u2013 switch the drone to <code>OFFBOARD</code> mode and arm automatically (<strong>the drone will take off</strong>);</li>",5),un=a("code",null,"frame_id",-1),hn=n(" \u2013 "),_n=n("coordinate system"),kn=o(" for values <code>x</code>, <code>y</code>, <code>z</code>, <code>vx</code>, <code>vy</code>, <code>vz</code>. Example: <code>map</code>, <code>body</code>, <code>aruco_map</code>. Default value: <code>map</code>.",21),mn=o(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you don&#39;t want to change your current yaw set the <code>yaw</code> parameter to <code>NaN</code> (angular velocity by default is 0).</p></div><p>Ascending to the altitude of 1.5 m with the climb rate of 0.5 m/s:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> auto_arm<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying in a straight line to point 5:0 (altitude 2) in the local system of coordinates at the speed of 0.8 m/s (yaw is set to 0):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying to point 5:0 without changing the yaw angle (<code>yaw</code> = <code>NaN</code>, <code>yaw_rate</code> = 0):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;nan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying 3 m to the right from the drone:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying 2 m to the left from the last navigation target:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;navigate_target&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Turn 90 degrees clockwise:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>yaw<span class="token operator">=</span>math<span class="token punctuation">.</span>radians<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div>`,13),gn=n("Flying to point 3:2 (with the altitude of 2 m) in the "),yn=n("ArUco map"),fn=n(" coordinate system with the speed of 1 m/s:"),vn=o(`<div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_map&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Rotating on the spot at the speed of 0.5 rad/s (counterclockwise):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;nan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yaw_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying 3 meters forwards at the speed of 0.5 m/s, yaw-rotating at the speed of 0.2 rad/s:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;nan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yaw_rate<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Ascending to the altitude of 2 m (command line):</p><div class="language-text ext-text"><pre class="language-text"><code>rosservice call /navigate &quot;{x: 0.0, y: 0.0, z: 2, yaw: 0.0, yaw_rate: 0.0, speed: 0.5, frame_id: &#39;body&#39;, auto_arm: true}&quot;
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Consider using the <code>navigate_target</code> frame instead of <code>body</code> for missions that primarily use relative movements forward/back/left/right. This negates inaccuracies in relative point calculations.</p></div><h3 id="navigate-global" tabindex="-1"><a class="header-anchor" href="#navigate-global" aria-hidden="true">#</a> navigate_global</h3><p>Flying in a straight line to a point in the global coordinate system (latitude/longitude).</p><p>Parameters:</p>`,11),bn=o("<li><code>lat</code>, <code>lon</code> \u2014 latitude and longitude <em>(degrees)</em>;</li><li><code>z</code> \u2014 altitude <em>(m)</em>;</li><li><code>yaw</code> \u2014 yaw angle <em>(radians)</em>;</li><li><code>yaw_rate</code> \u2013 angular yaw velocity (used for setting the yaw to <code>NaN</code>) <em>(rad/s)</em>;</li><li><code>speed</code> \u2013 flight speed (setpoint speed) <em>(m/s)</em>;</li><li><code>auto_arm</code> \u2013 switch the drone to <code>OFFBOARD</code> and arm automatically (<strong>the drone will take off</strong>);</li>",6),wn=a("code",null,"frame_id",-1),xn=n(" \u2013 "),zn=n("coordinate system"),Fn=n(" for "),Pn=a("code",null,"z",-1),Nn=n(" and "),An=a("code",null,"yaw",-1),Sn=n(" (Default value: "),Tn=a("code",null,"map",-1),On=n(")."),Dn=o(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If you don&#39;t want to change your current yaw set the <code>yaw</code> parameter to <code>NaN</code> (angular velocity by default is 0).</p></div><p>Flying to a global point at the speed of 5 m/s, while maintaining current altitude (<code>yaw</code> will be set to 0, the drone will face East):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate_global<span class="token punctuation">(</span>lat<span class="token operator">=</span><span class="token number">55.707033</span><span class="token punctuation">,</span> lon<span class="token operator">=</span><span class="token number">37.725010</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying to a global point without changing the yaw angle (<code>yaw</code> = <code>NaN</code>, <code>yaw_rate</code> = 0):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate_global<span class="token punctuation">(</span>lat<span class="token operator">=</span><span class="token number">55.707033</span><span class="token punctuation">,</span> lon<span class="token operator">=</span><span class="token number">37.725010</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;nan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Flying to a global point (command line):</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rosservice call /navigate_global <span class="token string">&quot;{lat: 55.707033, lon: 37.725010, z: 0.0, yaw: 0.0, yaw_rate: 0.0, speed: 5.0, frame_id: &#39;body&#39;, auto_arm: false}&quot;</span>
</code></pre></div><h3 id="set-position" tabindex="-1"><a class="header-anchor" href="#set-position" aria-hidden="true">#</a> set_position</h3><p>Set the setpoint for position and yaw. This service may be used to specify the continuous flow of target points, for example, for flying along complex trajectories (circular, arcuate, etc.).</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Use the <a href="#navigate"><code>navigate</code></a> higher-level service to fly to a point in a straight line or to perform takeoff.</p></div><p>Parameters:</p>`,11),In=o("<li><code>x</code>, <code>y</code>, <code>z</code> \u2014 point coordinates <em>(m)</em>;</li><li><code>yaw</code> \u2014 yaw angle <em>(radians)</em>;</li><li><code>yaw_rate</code> \u2013 angular yaw velocity (used for setting the yaw to NaN) <em>(rad/s)</em>;</li><li><code>auto_arm</code> \u2013 switch the drone to <code>OFFBOARD</code> and arm automatically (<strong>the drone will take off</strong>);</li>",4),Rn=a("code",null,"frame_id",-1),Ln=n(" \u2013 "),qn=n("coordinate system"),Bn=n(" for "),Un=a("code",null,"x",-1),Cn=n(", "),Gn=a("code",null,"y",-1),En=n(", "),Vn=a("code",null,"z",-1),Mn=n(" and "),Wn=a("code",null,"yaw",-1),Xn=n(" parameters (Default value: "),jn=a("code",null,"map",-1),Hn=n(")."),Yn=o(`<p>Hovering on the spot:</p><div class="language-python ext-py"><pre class="language-python"><code>set_position<span class="token punctuation">(</span>frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Assigning the target point 3 m above the current position:</p><div class="language-python ext-py"><pre class="language-python"><code>set_position<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Assigning the target point 1 m ahead of the current position:</p><div class="language-python ext-py"><pre class="language-python"><code>set_position<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Rotating on the spot at the speed of 0.5 rad/s:</p><div class="language-python ext-py"><pre class="language-python"><code>set_position<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> yaw<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">&#39;nan&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yaw_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="set-velocity" tabindex="-1"><a class="header-anchor" href="#set-velocity" aria-hidden="true">#</a> set_velocity</h3><p>Set speed and yaw setpoints.</p>`,10),Zn=o("<li><code>vx</code>, <code>vy</code>, <code>vz</code> \u2013 flight speed <em>(m/s)</em>;</li><li><code>yaw</code> \u2014 yaw angle <em>(radians)</em>;</li><li><code>yaw_rate</code> \u2013 angular yaw velocity (used for setting the yaw to NaN) <em>(rad/s)</em>;</li><li><code>auto_arm</code> \u2013 switch the drone to <code>OFFBOARD</code> and arm automatically (<strong>the drone will take off</strong>);</li>",4),Jn=a("code",null,"frame_id",-1),Kn=n(" \u2013 "),Qn=n("coordinate system"),$n=n(" for "),na=a("code",null,"vx",-1),aa=n(", "),sa=a("code",null,"vy",-1),ta=n(", "),ea=a("code",null,"vz",-1),oa=n(" and "),pa=a("code",null,"yaw",-1),ca=n(" (Default value: "),la=a("code",null,"map",-1),ia=n(")."),ra=o(`<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Parameter <code>frame_id</code> specifies only the orientation of the resulting velocity vector, but not its length.</p></div><p>Flying forward (relative to the drone) at the speed of 1 m/s:</p><div class="language-python ext-py"><pre class="language-python"><code>set_velocity<span class="token punctuation">(</span>vx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> vy<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">,</span> vz<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="set-attitude" tabindex="-1"><a class="header-anchor" href="#set-attitude" aria-hidden="true">#</a> set_attitude</h3>`,4),da=n("Set pitch, roll, yaw and throttle level (similar to "),ua=n("the "),ha=a("code",null,"STABILIZED",-1),_a=n(" mode"),ka=n("). This service may be used for lower level control of the drone behavior, or controlling the drone when no reliable data on its position is available."),ma=a("p",null,"Parameters:",-1),ga=o("<li><code>pitch</code>, <code>roll</code>, <code>yaw</code> \u2013 requested pitch, roll, and yaw angle <em>(radians)</em>;</li><li><code>thrust</code> \u2014 throttle level, ranges from 0 (no throttle, propellers are stopped) to 1 (full throttle).</li><li><code>auto_arm</code> \u2013 switch the drone to <code>OFFBOARD</code> mode and arm automatically (<strong>the drone will take off</strong>);</li>",3),ya=a("code",null,"frame_id",-1),fa=n(" \u2013 "),va=n("coordinate system"),ba=n(" for "),wa=a("code",null,"yaw",-1),xa=n(" (Default value: "),za=a("code",null,"map",-1),Fa=n(")."),Pa=a("h3",{id:"set-rates",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#set-rates","aria-hidden":"true"},"#"),n(" set_rates")],-1),Na=n("Set pitch, roll, and yaw rates and the throttle level (similar to "),Aa=n("the "),Sa=a("code",null,"ACRO",-1),Ta=n(" mode"),Oa=n("). This is the lowest drone control level (excluding direct control of motor rotation speed). This service may be used to automatically perform aerobatic tricks (e.g., flips)."),Da=o('<p>Parameters:</p><ul><li><code>pitch_rate</code>, <code>roll_rate</code>, <code>yaw_rate</code> \u2013 pitch, roll, and yaw rates <em>(rad/s)</em>;</li><li><code>thrust</code> \u2014 throttle level, ranges from 0 (no throttle, propellers are stopped) to 1 (full throttle).</li><li><code>auto_arm</code> \u2013 switch the drone to <code>OFFBOARD</code> and arm automatically (<strong>the drone will take off</strong>);</li></ul><p>The positive direction of <code>yaw_rate</code> rotation (when viewed from the top) is counterclockwise,<code>pitch_rate</code> rotation is forward, <code>roll_rate</code> rotation is to the left.</p><h3 id="land" tabindex="-1"><a class="header-anchor" href="#land" aria-hidden="true">#</a> land</h3>',4),Ia=n("Switch the drone to landing "),Ra=n("mode"),La=n(" ("),qa=a("code",null,"AUTO.LAND",-1),Ba=n(" or similar)."),Ua={class:"custom-container tip"},Ca=a("p",{class:"custom-container-title"},"TIP",-1),Ga=n("Set the "),Ea=a("code",null,"COM_DISARM_LAND",-1),Va=n(),Ma=n("PX4 parameter"),Wa=n(" to a value greater than 0 to enable automatic disarm after landing."),Xa=o(`<p>Landing the drone:</p><div class="language-python ext-py"><pre class="language-python"><code>res <span class="token operator">=</span> land<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> res<span class="token punctuation">.</span>success<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;drone is landing&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Landing the drone (command line):</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rosservice call /land <span class="token string">&quot;{}&quot;</span>
</code></pre></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>In recent PX4 versions, the vehicle will be switched out of LAND mode to manual mode, if the remote control sticks are moved significantly.</p></div><h2 id="additional-materials" tabindex="-1"><a class="header-anchor" href="#additional-materials" aria-hidden="true">#</a> Additional materials</h2>`,6),ja=n("ArUco-based position estimation and navigation"),Ha=n("."),Ya=n("Program samples and snippets"),Za=n(".");function Ja(Ka,Qa){const t=p("RouterLink"),c=p("ExternalLinkIcon");return i(),r(d,null,[h,a("p",null,[_,k,m,g,y,f,v,s(t,{to:"/en/modes.html"},{default:e(()=>[b]),_:1}),w,s(t,{to:"/en/frames.html"},{default:e(()=>[x]),_:1}),z]),a("p",null,[F,P,s(t,{to:"/en/mavros.html"},{default:e(()=>[N]),_:1}),A]),S,a("ul",null,[a("li",null,[T,O,s(t,{to:"/en/frames.html"},{default:e(()=>[D]),_:1}),I])]),R,a("ul",null,[L,q,B,a("li",null,[U,C,s(t,{to:"/en/modes.html"},{default:e(()=>[G]),_:1}),E]),V,a("li",null,[M,W,X,j,s(t,{to:"/en/gps.html"},{default:e(()=>[H]),_:1}),Y]),a("li",null,[Z,J,a("a",K,[Q,s(c)]),$,nn,an,s(t,{to:"/en/gps.html"},{default:e(()=>[sn]),_:1}),tn]),en]),on,a("p",null,[pn,s(t,{to:"/en/aruco.html"},{default:e(()=>[cn]),_:1}),ln]),rn,a("ul",null,[dn,a("li",null,[un,hn,s(t,{to:"/en/frames.html"},{default:e(()=>[_n]),_:1}),kn])]),mn,a("p",null,[gn,s(t,{to:"/en/aruco.html"},{default:e(()=>[yn]),_:1}),fn]),vn,a("ul",null,[bn,a("li",null,[wn,xn,s(t,{to:"/en/frames.html"},{default:e(()=>[zn]),_:1}),Fn,Pn,Nn,An,Sn,Tn,On])]),Dn,a("ul",null,[In,a("li",null,[Rn,Ln,s(t,{to:"/en/frames.html"},{default:e(()=>[qn]),_:1}),Bn,Un,Cn,Gn,En,Vn,Mn,Wn,Xn,jn,Hn])]),Yn,a("ul",null,[Zn,a("li",null,[Jn,Kn,s(t,{to:"/en/frames.html"},{default:e(()=>[Qn]),_:1}),$n,na,aa,sa,ta,ea,oa,pa,ca,la,ia])]),ra,a("p",null,[da,s(t,{to:"/en/modes.html"},{default:e(()=>[ua,ha,_a]),_:1}),ka]),ma,a("ul",null,[ga,a("li",null,[ya,fa,s(t,{to:"/en/frames.html"},{default:e(()=>[va]),_:1}),ba,wa,xa,za,Fa])]),Pa,a("p",null,[Na,s(t,{to:"/en/modes.html"},{default:e(()=>[Aa,Sa,Ta]),_:1}),Oa]),Da,a("p",null,[Ia,s(t,{to:"/en/modes.html"},{default:e(()=>[Ra]),_:1}),La,qa,Ba]),a("div",Ua,[Ca,a("p",null,[Ga,Ea,Va,s(t,{to:"/en/parameters.html"},{default:e(()=>[Ma]),_:1}),Wa])]),Xa,a("ul",null,[a("li",null,[s(t,{to:"/en/aruco.html"},{default:e(()=>[ja]),_:1}),Ha]),a("li",null,[s(t,{to:"/en/snippets.html"},{default:e(()=>[Ya]),_:1}),Za])])],64)}var ns=l(u,[["render",Ja],["__file","simple_offboard.html.vue"]]);export{ns as default};
