import{_ as c,r as p,o as l,c as r,a as n,b as s,w as e,F as i,d as a,e as u}from"./app.4f6a4bec.js";import{_ as d}from"./aruco-axis.1b2d6d7d.js";const k={},m=n("h1",{id:"aruco-marker-detection",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aruco-marker-detection","aria-hidden":"true"},"#"),a(" ArUco marker detection")],-1),h={class:"custom-container tip"},g=n("p",{class:"custom-container-title"},"TIP",-1),_=a("The following applies to "),f=a("image versions"),v=a(),y=n("strong",null,"0.22",-1),w=a(" and up. Older documentation is still available for "),b={href:"https://github.com/CopterExpress/clover/blob/v0.20/docs/en/aruco_marker.md",target:"_blank",rel:"noopener noreferrer"},x=a("for version "),q=n("strong",null,"0.20",-1),S=a("."),T={class:"custom-container tip"},F=n("p",{class:"custom-container-title"},"TIP",-1),N=a("Marker detection requires the camera module to be correctly plugged in and "),z=a("configured"),E=a("."),P=n("code",null,"aruco_detect",-1),I=a(" module detects ArUco markers and publishes their positions in ROS topics and as "),C=a("TF frames"),M=a("."),A=a("This is useful in conjunction with other positioning systems, such as "),B=a("GPS"),L=a(", "),U=a("Optical Flow"),V=a(", PX4Flow, visual odometry, ultrasonic ("),O={href:"https://marvelmind.com",target:"_blank",rel:"noopener noreferrer"},R=a("Marvelmind"),j=a(") or UWB-based ("),D={href:"https://www.pozyx.io",target:"_blank",rel:"noopener noreferrer"},W=a("Pozyx"),G=a(") localization."),H=a("Using this module along with "),X=a("map-based navigation"),Y=a(" is also possible."),J=u(`<h2 id="setup" tabindex="-1"><a class="header-anchor" href="#setup" aria-hidden="true">#</a> Setup</h2><p>Set the <code>aruco</code> argument in <code>~/catkin_ws/src/clover/clover/launch/clover.launch</code> to <code>true</code>:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>For enabling detection set the <code>aruco_detect</code> argument in <code>~/catkin_ws/src/clover/clover/launch/aruco.launch</code> to <code>true</code>:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco_detect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>For the module to work correctly the following arguments should also be set:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>placement<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>floor<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- markers&#39; placement, explained below  --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>length<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.33<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>     <span class="token comment">&lt;!-- length of a single marker, in meters (excluding the white border) --&gt;</span>
</code></pre></div><p><code>placement</code> argument should be set to:</p><ul><li><code>floor</code> if <em>all</em> markers are on the ground;</li><li><code>ceiling</code> if <em>all</em> markers are on the ceiling;</li><li>an empty string otherwise.</li></ul><p>You may specify length for each marker individually by using the <code>length_override</code> parameter of the node <code>aruco_detect</code>:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>length_override/3<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.1<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>    <span class="token comment">&lt;!-- marker with id=3 has a side of 0.1m --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>length_override/17<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.25<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- marker with id=17 has a side of 0.25m --&gt;</span>
</code></pre></div><h2 id="coordinate-system" tabindex="-1"><a class="header-anchor" href="#coordinate-system" aria-hidden="true">#</a> Coordinate system</h2><p>Each marker has its own coordinate systems. It is aligned as follows:</p><ul><li>the <strong><font color="red">x</font></strong> axis points to the right side of the marker;</li><li>the <strong><font color="green">y</font></strong> axis points to the top side of the marker;</li><li>the <strong><font color="blue">z</font></strong> axis points outwards from the plane of the marker</li></ul><img src="`+d+`" width="300"><h2 id="working-with-detected-markers" tabindex="-1"><a class="header-anchor" href="#working-with-detected-markers" aria-hidden="true">#</a> Working with detected markers</h2><p>Navigation within the marker-based TF frames is possible with <code>simple_offboard</code> node.</p><p>Sample code to fly to a point 1 metre above marker with id 5:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_5&#39;</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre></div><p>Sample code to fly to a point 1 metre to the left and 2 metres above marker with id 7:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_7&#39;</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>
</code></pre></div><p>Sample code to rotate counterclockwise while hovering 1.5 metres above marker id 10:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_10&#39;</span><span class="token punctuation">,</span> x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> yaw_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
</code></pre></div><p>Note that if the required marker isn&#39;t detected for 0.5 seconds after the <code>navigate</code> command, the command will be ignored.</p><p>These frames may also be used in other services that accept TF frames (like <code>get_telemetry</code>). The following code will get the drone&#39;s position relative to the marker with id 3:</p><div class="language-python ext-py"><pre class="language-python"><code>telem <span class="token operator">=</span> get_telemetry<span class="token punctuation">(</span>frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_3&#39;</span><span class="token punctuation">)</span>
</code></pre></div><p>Note that if the required marker isn&#39;t detected for 0.5 seconds, the <code>telem.x</code>, <code>telem.y</code>, <code>telem.z</code>, <code>telem.yaw</code> fields will contain <code>NaN</code>.</p><h2 id="handling-marker-detection-in-python" tabindex="-1"><a class="header-anchor" href="#handling-marker-detection-in-python" aria-hidden="true">#</a> Handling marker detection in Python</h2><p>The following snippet shows how to read the <code>aruco_detect/markers</code> topic in Python:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">from</span> aruco_pose<span class="token punctuation">.</span>msg <span class="token keyword">import</span> MarkerArray
rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;my_node&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># ...</span>

<span class="token keyword">def</span> <span class="token function">markers_callback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Detected markers:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> marker <span class="token keyword">in</span> msg<span class="token punctuation">.</span>markers<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Marker: %s&#39;</span> <span class="token operator">%</span> marker<span class="token punctuation">)</span>

<span class="token comment"># Create a Subscription object. Each time a message is posted in aruco_detect/markers, the markers_callback function is called with this message as its argument.</span>
rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">&#39;aruco_detect/markers&#39;</span><span class="token punctuation">,</span> MarkerArray<span class="token punctuation">,</span> markers_callback<span class="token punctuation">)</span>

<span class="token comment"># ...</span>

rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><p>Each message contains the marker ID, its corner points on the image and its position relative to the camera.</p><hr>`,32),K=a("Suggested reading: "),Q=a("map-based navigation");function Z($,aa){const t=p("RouterLink"),o=p("ExternalLinkIcon");return l(),r(i,null,[m,n("div",h,[g,n("p",null,[_,s(t,{to:"/en/image.html"},{default:e(()=>[f]),_:1}),v,y,w,n("a",b,[x,q,s(o)]),S])]),n("div",T,[F,n("p",null,[N,s(t,{to:"/en/camera.html"},{default:e(()=>[z]),_:1}),E])]),n("p",null,[P,I,s(t,{to:"/en/frames.html"},{default:e(()=>[C]),_:1}),M]),n("p",null,[A,s(t,{to:"/en/gps.html"},{default:e(()=>[B]),_:1}),L,s(t,{to:"/en/optical_flow.html"},{default:e(()=>[U]),_:1}),V,n("a",O,[R,s(o)]),j,n("a",D,[W,s(o)]),G]),n("p",null,[H,s(t,{to:"/en/aruco_map.html"},{default:e(()=>[X]),_:1}),Y]),J,n("p",null,[K,s(t,{to:"/en/aruco_map.html"},{default:e(()=>[Q]),_:1})])],64)}var ta=c(k,[["render",Z],["__file","aruco_marker.html.vue"]]);export{ta as default};
