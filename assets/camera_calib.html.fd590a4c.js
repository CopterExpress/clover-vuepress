import{_ as r,r as i,o as c,c as p,a as e,b as n,F as l,e as s,d as a}from"./app.4f6a4bec.js";import{_ as o,a as d,b as m,c as u,d as g,e as h,f as b,g as _,h as f,i as v}from"./pty3.6a39a70d.js";var k="/clover-vuepress/assets/calibration.8c5782f4.jpg";const x={},y=s('<h1 id="camera-calibration" tabindex="-1"><a class="header-anchor" href="#camera-calibration" aria-hidden="true">#</a> Camera calibration</h1><p>Computer vision is becoming more and more widespread. Often, computer vision algorithms are not precise and obtain distorted images from the camera, which is especially true for fisheye cameras.</p><p><img src="'+o+`" alt="img"></p><blockquote><p>The image is &quot;rounded&quot; closer to the edge.</p></blockquote><p>Any computer vision algorithm will perceive the picture incorrectly. To remove such distortion, the camera that receives the image is to be calibrated in accordance with its own peculiarities.</p><h2 id="script-installation" tabindex="-1"><a class="header-anchor" href="#script-installation" aria-hidden="true">#</a> Script installation</h2><p>First, you have to install the necessary libraries:</p><div class="language-text ext-text"><pre class="language-text"><code>pip install numpy
pip install opencv-python
pip install glob
pip install pyyaml
pip install urllib.request
</code></pre></div><p>Then download the script from the repository:</p><div class="language-text ext-text"><pre class="language-text"><code>git clone https://github.com/tinderad/clever_cam_calibration.git
</code></pre></div><p>Go to the downloaded folder and install the script:</p><div class="language-text ext-text"><pre class="language-text"><code>cd clever_cam_calibration
sudo python setup.py build
sudo python setup.py install
</code></pre></div>`,12),w=a("If you are using Windows, download the archive from the "),q={href:"https://github.com/tinderad/clever_cam_calibration/archive/master.zip",target:"_blank",rel:"noopener noreferrer"},C=a("repository"),T=a(", unzip it and install:"),S=e("div",{class:"language-text ext-text"},[e("pre",{class:"language-text"},[e("code",null,`cd path\\to\\archive\\clever_cam_calibration\\
python setup.py build
python setup.py install
`)])],-1),E=e("blockquote",null,[e("p",null,"path\\to\\archive \u2013 path to unpacked archive.")],-1),I=e("h2",{id:"preparing-for-calibration",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#preparing-for-calibration","aria-hidden":"true"},"#"),a(" Preparing for calibration")],-1),P=a("You will have to prepare a calibration target. It looks like a chessboard. The file is available for downloading "),A={href:"https://www.oreilly.com/library/view/learning-opencv-3/9781491937983/assets/lcv3_ac01.png",target:"_blank",rel:"noopener noreferrer"},F=a("here"),L=a(". Glue a printed target to any solid surface. Count the number of intersections on the board lengthwise and widthwise, measure the size of a cell (mm)."),z=s('<p><img src="'+d+`" alt="img"></p><p>Turn on Clover and connect to its Wi-Fi.</p><blockquote><p>Navigate to 192.168.11.1:8080 and check whether the computer receives images from the image_raw topic.</p></blockquote><h2 id="calibration" tabindex="-1"><a class="header-anchor" href="#calibration" aria-hidden="true">#</a> Calibration</h2><p>Run script <em><strong>calibrate_cam</strong></em>:</p><p><strong>Windows:</strong></p><div class="language-text ext-text"><pre class="language-text"><code>&gt;path\\to\\python\\Scripts\\calibrate_cam.exe
</code></pre></div><blockquote><p>path\\to\\Python \u2013 path to the Python folder</p></blockquote><p><strong>Linux:</strong></p><div class="language-text ext-text"><pre class="language-text"><code>&gt;calibrate_cam
</code></pre></div><p>Specify board parameters:</p><div class="language-text ext-text"><pre class="language-text"><code>&gt;calibrate_cam
Chessboard width: # Intersections widthwise
Chessboard height: # Intersections heightwise
Square size: # Length of cell edge (mm)
Saving mode (YES - on): # Save mode
</code></pre></div><blockquote><p>Save mode: if enabled, all received pictures will be saved in the current folder.</p></blockquote><p>The script will start running:</p><div class="language-text ext-text"><pre class="language-text"><code>Calibration started!
Commands:
help, catch (key: Enter), delete, restart, stop, finish
</code></pre></div><p>To calibrate the camera, make at least 25 photos of the chessboard at various angles.</p><p><img src="`+k+`" alt="img"></p><p>To make a photo, enter command <em><strong>catch</strong></em>.</p><div class="language-text ext-text"><pre class="language-text"><code>&gt;catch
</code></pre></div><p>The program will inform you about the calibration status.</p><div class="language-text ext-text"><pre class="language-text"><code>...
Chessboard not found, now 0 (25 required)
&gt;  # Enter
---
Image added, now 1 (25 required)
</code></pre></div><blockquote><p>Instead of entering command <em><strong>catch</strong></em> each time, you can just press <em><strong>Enter</strong></em> (enter a blank line).</p></blockquote><p>After you have made a sufficient number of images, enter command <em><strong>finish</strong></em>.</p><div class="language-text ext-text"><pre class="language-text"><code>...
&gt;finish
Calibration successful!
</code></pre></div><h3 id="calibration-by-the-existing-images" tabindex="-1"><a class="header-anchor" href="#calibration-by-the-existing-images" aria-hidden="true">#</a> Calibration by the existing images</h3><p>If you already have images, you can calibrate the camera by them with the help of script <em><strong>calibrate_cam_ex</strong></em>.</p><div class="language-text ext-text"><pre class="language-text"><code>&gt;calibrate_cam_ex
</code></pre></div><p>Specify target characteristics and the path to the folder with images:</p><div class="language-text ext-text"><pre class="language-text"><code>&gt;calibrate_cam_ex
Chessboard width: # Intersections widthwise
Chessboard height: # Intersections heightwise
Square size: # Length of cell edge (mm)
Path: # Path to the folder with images
</code></pre></div><p>Apart from that, this script works similarly to <em><strong>calibrate_cam</strong></em>.</p><p>The program will process all received pictures, and create file <em><strong>camera_info.yaml</strong></em> in the current folder. Using this file, you can equalize distortions in the images obtained from this camera.</p><blockquote><p>If you change the resolution of the received image, you will have to re-calibrate the camera.</p></blockquote><h2 id="correcting-distortions" tabindex="-1"><a class="header-anchor" href="#correcting-distortions" aria-hidden="true">#</a> Correcting distortions</h2><p>Function <em><strong>get_undistorted_image(cv2_image, camera_info)</strong></em> is responsible for obtaining a corrected image:</p><ul><li><em><strong>cv2_image</strong></em>: An image encoded into a cv2 array.</li><li><em><strong>camera_info</strong></em>: The path to the calibration file.\xAC</li></ul><p>The function returns a cv2 array, into which the corrected image is coded.</p><blockquote><p>If you are using a fisheye camera provided with Clover, for processing images with resolution 320x240 or 640x480, you can use the existing calibration settings. To do this, pass parameters <em><strong>clever_cam_calibration.clevercamcalib.CLEVER_FISHEYE_CAM_320</strong></em> or <em><strong>clever_cam_calibration.clevercamcalib.CLEVER_FISHEYE_CAM_640</strong></em> as argument <em><strong>camera_info</strong></em>, respectively.</p></blockquote><h2 id="examples-of-operation" tabindex="-1"><a class="header-anchor" href="#examples-of-operation" aria-hidden="true">#</a> Examples of operation</h2><p>Source images:</p><p><img src="`+o+'" alt="img"></p><p><img src="'+m+'" alt="img"></p><p>Corrected images:</p><p><img src="'+u+'" alt="img"></p><p><img src="'+g+`" alt="img"></p><h2 id="an-example-of-usage" tabindex="-1"><a class="header-anchor" href="#an-example-of-usage" aria-hidden="true">#</a> An example of usage</h2><p><strong>Processing image stream from the camera</strong>.</p><p>This program receives images from the camera on Clover and displays them on the screen in corrected for, using the existing calibration file.</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> clevercamcalib<span class="token punctuation">.</span>clevercamcalib <span class="token keyword">as</span> ccc
<span class="token keyword">import</span> cv2
<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request
<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
	req <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">&#39;http://192.168.11.1:8080/snapshot?topic=/main_camera/image_raw&#39;</span><span class="token punctuation">)</span>
    arr <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token builtin">bytearray</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>
    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imdecode<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
    undistorted_img <span class="token operator">=</span> ccc<span class="token punctuation">.</span>get_undistorted_image<span class="token punctuation">(</span>image<span class="token punctuation">,</span> ccc<span class="token punctuation">.</span>CLEVER_FISHEYE_CAM_640<span class="token punctuation">)</span>
    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">&quot;undistort&quot;</span><span class="token punctuation">,</span> undistorted_img<span class="token punctuation">)</span>
    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">)</span>
cv2<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre></div><h2 id="the-usage-for-aruco" tabindex="-1"><a class="header-anchor" href="#the-usage-for-aruco" aria-hidden="true">#</a> The usage for ArUco</h2><p>To apply the calibration parameters to the ArUco navigation system, move the calibration .yaml file to Raspberry Pi of Clover, and initialize it.</p><blockquote><p>Don&#39;t forget to connect to Wi-Fi of Clover.</p></blockquote><p>The SFTP protocol is used for transferring the file. This example, WinSCP program is used.</p><p>Connect to Raspberry Pi via SFTP:</p><blockquote><p>Password: <em><strong>raspberry</strong></em></p></blockquote><p><img src="`+h+'" alt="img"></p><p>Press \u201CEnter\u201D. Go to <em><strong>/home/pi/catkin_ws/src/clever/clever/camera_info/</strong></em>, and copy the calibration .yaml file to this folder:</p><p><img src="'+b+'" alt="img"></p><p>Now we have to select this file in ArUco configuration. Connection via SSH is used for this purpose. This example, PuTTY program is used.</p><p>Connect to Raspberry Pi via SSH:</p><p><img src="'+_+'" alt="img"></p><p>Log in with username <em><strong>pi</strong></em> and password <em><strong>raspberry</strong></em>, go to directory <em><strong>/home/pi/catkin_ws/src/clever/clever/launch</strong></em> and start editing configuration <em><strong>main_camera.launch</strong></em>:</p><p><img src="'+f+'" alt="img"></p><p>In line <em><strong>camera node</strong></em>, change parameter <em><strong>camera_info</strong></em> to <em><strong>camera_info.yaml</strong></em>:</p><p><img src="'+v+'" alt="img"></p><blockquote><p>Don&#39;t forget to change camera resolution.</p></blockquote>',65);function R(V,N){const t=i("ExternalLinkIcon");return c(),p(l,null,[y,e("p",null,[w,e("a",q,[C,n(t)]),T]),S,E,I,e("p",null,[P,e("a",A,[F,n(t)]),L]),z],64)}var H=r(x,[["render",R],["__file","camera_calib.html.vue"]]);export{H as default};
