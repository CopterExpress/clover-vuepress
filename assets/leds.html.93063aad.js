import{_ as l,r as p,o as r,c as i,a as s,b as t,w as e,F as u,d as n,e as o}from"./app.4f6a4bec.js";import{_ as d}from"./clever-led.f67d61b2.js";const k={},h=s("h1",{id:"working-with-a-led-strip",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#working-with-a-led-strip","aria-hidden":"true"},"#"),n(" Working with a LED strip")],-1),m={class:"custom-container tip"},g=s("p",{class:"custom-container-title"},"TIP",-1),f=n("Documentation for the "),_=n("image"),b=n(" versions, starting with "),v=s("strong",null,"0.21",-1),y=n(". For older versions refer to "),w={href:"https://github.com/CopterExpress/clover/blob/v0.20/docs/en/leds.md",target:"_blank",rel:"noopener noreferrer"},x=n("documentation for version "),E=s("strong",null,"0.20",-1),q=n("."),D=s("p",null,[n("Clover drone kits contain addressable LED strips based on "),s("em",null,"ws281x"),n(" drivers. Each LED may be set to any one of 16 million possible colors (each color is encoded by a 24-bit number). This allows making the Clover flight more spectacular, as well as show flight modes, display stages of current user program, and notify the pilot of other events.")],-1),L=s("img",{src:d,class:"center",width:"600"},null,-1),S=n("Our "),R=n("Raspberry Pi image"),C=n(" contains preinstalled modules for interfacing with the LED strip. They allow the user to:"),I=s("ul",null,[s("li",null,"manage LED strip effects and animations (high-level control);"),s("li",null,"control individual LED colors (low-level control);"),s("li",null,"configure the strip to display flight events.")],-1),P=s("div",{class:"custom-container warning"},[s("p",{class:"custom-container-title"},"WARNING"),s("p",null,"LED strip can consume a lot of power! Powering it from a Raspberry Pi may overload the computer's power circuitry. Consider using a separate BEC as a power source.")],-1),O=s("h2",{id:"high-level-control",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#high-level-control","aria-hidden":"true"},"#"),n(" High-level control")],-1),B=n("Connect the +5v and GND leads of your LED to a power source and the DIN (data in) lead to GPIO21. Consult the "),T=n("assembly instructions"),N=n(" for details."),G=o(`<li><p>Enable LED strip support in <code>~/catkin_ws/src/clover/clover/launch/clover.launch</code>:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>led<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div></li><li><p>Configure the <em>ws281x</em> parameters in <code>~/catkin_ws/src/clover/clover/launch/led.launch</code>. Change the number of addressable LEDs and the GPIO pin used for control to match your configuration:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>led_count<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>58<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!-- Number of LEDs in the strip --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>gpio_pin<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>21<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>   <span class="token comment">&lt;!-- GPIO data pin --&gt;</span>
</code></pre></div></li>`,2),A=s("p",null,[n("High-level interface allows changing current effect (or animation) on the strip. It is exposed as the "),s("code",null,"/led/set_effect"),n(" service. It has the following arguments:")],-1),Y=s("li",null,[s("code",null,"effect"),n(" is the name of requested effect.")],-1),z=s("code",null,"r",-1),V=n(", "),H=s("code",null,"g",-1),F=n(", "),W=s("code",null,"b",-1),U=n(" are "),j={href:"https://en.wikipedia.org/wiki/RGB",target:"_blank",rel:"noopener noreferrer"},J=n("RGB"),K=n(" components of effect color. Each component is an integer in a 0 to 255 range."),M=o(`<p>Currently available effects are:</p><ul><li><code>fill</code> (or an empty string) fills the whole strip with the requested color;</li><li><code>blink</code> turns the strip on and off, setting it to the requested color;</li><li><code>blink_fast</code> is the same, but faster;</li><li><code>fade</code> fades smoothly to the requested color;</li><li><code>wipe</code> fills the strip with the requested color one LED at a time;</li><li><code>flash</code> blinks twice and returns to the previous effect;</li><li><code>rainbow</code> creates a rainbow-like shifting effect;</li><li><code>rainbow_fill</code> cycles the strip through rainbow colors, filling the whole strip with the same color.</li></ul><p>Python example:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">from</span> clover<span class="token punctuation">.</span>srv <span class="token keyword">import</span> SetLEDEffect

rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;flight&#39;</span><span class="token punctuation">)</span>

set_effect <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;led/set_effect&#39;</span><span class="token punctuation">,</span> SetLEDEffect<span class="token punctuation">)</span>  <span class="token comment"># define proxy to ROS-service</span>

set_effect<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># fill strip with red color</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

set_effect<span class="token punctuation">(</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># fill strip with green color</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

set_effect<span class="token punctuation">(</span>effect<span class="token operator">=</span><span class="token string">&#39;fade&#39;</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment"># fade to blue color</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>

set_effect<span class="token punctuation">(</span>effect<span class="token operator">=</span><span class="token string">&#39;flash&#39;</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># flash twice with red color</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

set_effect<span class="token punctuation">(</span>effect<span class="token operator">=</span><span class="token string">&#39;blink&#39;</span><span class="token punctuation">,</span> r<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">255</span><span class="token punctuation">)</span>  <span class="token comment"># blink with white color</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

set_effect<span class="token punctuation">(</span>effect<span class="token operator">=</span><span class="token string">&#39;rainbow&#39;</span><span class="token punctuation">)</span>  <span class="token comment"># show rainbow</span>
</code></pre></div><p>You can also set colors from your Bash shell:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rosservice call /led/set_effect <span class="token string">&quot;{effect: &#39;fade&#39;, r: 0, g: 0, b: 255}&quot;</span>
</code></pre></div><div class="language-bash ext-sh"><pre class="language-bash"><code>rosservice call /led/set_effect <span class="token string">&quot;{effect: &#39;rainbow&#39;}&quot;</span>
</code></pre></div><h2 id="configuring-event-visualizations" tabindex="-1"><a class="header-anchor" href="#configuring-event-visualizations" aria-hidden="true">#</a> Configuring event visualizations</h2><p>It is possible to display current flight controller status and notify the user about some events with the LED strip. This is configured in the <code>~/catkin_ws/src/clover/clover/launch/led.launch</code> file in the <em>events effects table</em> section. Here is a sample configuration:</p><div class="language-xml ext-xml"><pre class="language-xml"><code>startup: { r: 255, g: 255, b: 255 }
connected: { effect: rainbow }
disconnected: { effect: blink, r: 255, g: 50, b: 50 }
<span class="token comment">&lt;!-- ... --&gt;</span>
</code></pre></div><p>The left part is one of the possible events that the strip reacts to. The right part contains the effect description that you want to execute for this event.</p><p>Here is the list of supported events:</p><table><tr><th>Event</th><th>Description</th><th>Default effect</th></tr><tr><td><code>startup</code></td><td>Clover system startup</td><td>White</td></tr><tr><td><code>connected</code></td><td>Successful connection to flight controller</td><td>Rainbow</td></tr><tr><td><code>disconnected</code></td><td>Connection to flight controller lost</td><td><div class="circle" style="background:rgb(255,50,50);"></div>Red\xA0blink</td></tr><tr><td><code>armed</code></td><td>Transition to Armed state</td><td></td></tr><tr><td><code>disarmed</code></td><td>Transition to Disarmed state</td><td></td></tr><tr><td><code>acro</code></td><td>Acro mode</td><td><div class="circle" style="background:rgb(245,155,0);"></div>Orange</td></tr><tr><td><code>stabilized</code></td><td>Stabilized mode</td><td><div class="circle" style="background:rgb(30,180,50);"></div>Green</td></tr><tr><td><code>altctl</code></td><td>Altitude mode</td><td><div class="circle" style="background:rgb(255,255,40);"></div>Yellow</td></tr><tr><td><code>posctl</code></td><td>Position mode</td><td><div class="circle" style="background:rgb(50,100,220);"></div>Blue</td></tr><tr><td><code>offboard</code></td><td>Offboard mode</td><td><div class="circle" style="background:rgb(220,20,250);"></div>Violet</td></tr><tr><td><code>rattitude</code>, <code>mission</code>, <code>rtl</code>, <code>land</code></td><td>Corresponding mode</td><td></td></tr><tr><td><code>error</code></td><td>Error in one of ROS nodes or in the flight controller (<i>ERROR</i> message in <code>/rosout</code>)</td><td><div class="circle" style="background:rgb(255,0,0);"></div>Red flash</td></tr><tr><td><code>low_battery</code></td><td>Low battery (threshold is set in the <code>threshold</code> parameter)</td><td><nobr><div class="circle" style="background:rgb(255,0,0);"></div>Red fast blink</nobr></td></tr></table>`,13),Q={class:"custom-container tip"},X=s("p",{class:"custom-container-title"},"TIP",-1),Z=n("You need to "),$=n("calibrate the power sensor"),ss=n(" for the "),ns=s("code",null,"low_battery",-1),ts=n(" event to work properly."),as=o(`<p>In order to disable LED strip notifications set <code>led_notify</code> argument in <code>~/catkin_ws/src/clover/clover/launch/led.launch</code> to <code>false</code>:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>led_notify<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2 id="low-level-control" tabindex="-1"><a class="header-anchor" href="#low-level-control" aria-hidden="true">#</a> Low-level control</h2><p>You can use the <code>/led/set_leds</code> ROS service to control individual LEDs. It accepts an array of LED indices and desired colors.</p><p>Python example:</p><div class="language-python ext-py"><pre class="language-python"><code><span class="token keyword">import</span> rospy
<span class="token keyword">from</span> led_msgs<span class="token punctuation">.</span>srv <span class="token keyword">import</span> SetLEDs
<span class="token keyword">from</span> led_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> LEDStateArray<span class="token punctuation">,</span> LEDState

rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">&#39;flight&#39;</span><span class="token punctuation">)</span>

set_leds <span class="token operator">=</span> rospy<span class="token punctuation">.</span>ServiceProxy<span class="token punctuation">(</span><span class="token string">&#39;led/set_leds&#39;</span><span class="token punctuation">,</span> SetLEDs<span class="token punctuation">)</span>  <span class="token comment"># define proxy to ROS service</span>

<span class="token comment"># switch LEDs number 0, 1 and 2 to red, green and blue color:</span>
set_leds<span class="token punctuation">(</span><span class="token punctuation">[</span>LEDState<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LEDState<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> LEDState<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre></div><p>You can also use this service from the your Bash shell:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rosservice call /led/set_leds <span class="token string">&quot;leds:
- index: 0
  r: 50
  g: 100
  b: 200&quot;</span>
</code></pre></div><p>Current LED strip state is published in the <code>/led/state</code> ROS topic. You can view the contents of this topic from your Bash shell:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rostopic <span class="token builtin class-name">echo</span> /led/state
</code></pre></div><p>Using the same topic you can get the configured number os LEDs, using Python:</p><div class="language-python ext-py"><pre class="language-python"><code>led_count <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>rospy<span class="token punctuation">.</span>wait_for_message<span class="token punctuation">(</span><span class="token string">&#39;led/state&#39;</span><span class="token punctuation">,</span> LEDStateArray<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>leds<span class="token punctuation">)</span>
</code></pre></div>`,12);function es(os,cs){const a=p("RouterLink"),c=p("ExternalLinkIcon");return r(),i(u,null,[h,s("div",m,[g,s("p",null,[f,t(a,{to:"/en/image.html"},{default:e(()=>[_]),_:1}),b,v,y,s("a",w,[x,E,t(c)]),q])]),D,L,s("p",null,[S,t(a,{to:"/en/image.html"},{default:e(()=>[R]),_:1}),C]),I,P,O,s("ol",null,[s("li",null,[s("p",null,[B,t(a,{to:"/en/assemble_4_2.html#installing-led-strip"},{default:e(()=>[T]),_:1}),N])]),G]),A,s("ul",null,[Y,s("li",null,[z,V,H,F,W,U,s("a",j,[J,t(c)]),K])]),M,s("div",Q,[X,s("p",null,[Z,t(a,{to:"/en/power.html#calibrating-the-power-sensor"},{default:e(()=>[$]),_:1}),ss,ns,ts])]),as],64)}var rs=l(k,[["render",es],["__file","leds.html.vue"]]);export{rs as default};
