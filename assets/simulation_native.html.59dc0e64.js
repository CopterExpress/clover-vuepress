import{_ as t,r as o,o as c,c as i,a as s,b as n,F as l,d as e,e as r}from"./app.4f6a4bec.js";const p={},d=s("h1",{id:"native-setup",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#native-setup","aria-hidden":"true"},"#"),e(" Native setup")],-1),u=s("p",null,"Setting up the simulation environment from scratch requires some effort, but results in the most performant setup, with less chance of driver issues.",-1),h={class:"custom-container tip"},m=s("p",{class:"custom-container-title"},"TIP",-1),g=e("See up-to-date commands set for installation Clover simulation software in the script, that builds the virtual machine image with the simulator: "),k={href:"https://github.com/CopterExpress/clover_vm/blob/master/scripts/install_software.sh",target:"_blank",rel:"noopener noreferrer"},b=s("code",null,"install_software.sh",-1),f=e("."),v=s("p",null,[e("Prerequisites: "),s("strong",null,"Ubuntu 20.04"),e(".")],-1),_=s("h2",{id:"install-ros",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#install-ros","aria-hidden":"true"},"#"),e(" Install ROS")],-1),w=e("Install ROS Noetic using the "),y={href:"http://wiki.ros.org/noetic/Installation/Ubuntu",target:"_blank",rel:"noopener noreferrer"},x=e("official installation manual"),P=e(" (Desktop or Full install)."),q=r(`<p>Add sourcing ROS&#39; <code>setup.bash</code> initialization script to your <code>.bashrc</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">echo</span> <span class="token string">&quot;source /opt/ros/noetic/setup.bash&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">source</span> ~/.bashrc
</code></pre></div><p>Install required tools:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> build-essential <span class="token function">git</span> python3-pip python3-rosdep
</code></pre></div><h2 id="create-a-workspace-for-the-simulation" tabindex="-1"><a class="header-anchor" href="#create-a-workspace-for-the-simulation" aria-hidden="true">#</a> Create a workspace for the simulation</h2><p>Create a workspace for the simulation:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">mkdir</span> -p ~/catkin_ws/src
<span class="token builtin class-name">cd</span> ~/catkin_ws
catkin_make
<span class="token builtin class-name">echo</span> <span class="token string">&quot;source ~/catkin_ws/devel/setup.bash&quot;</span> <span class="token operator">&gt;&gt;</span> ~/.bashrc
<span class="token builtin class-name">source</span> ~/.bashrc
</code></pre></div><p>Clone Clover sources:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/catkin_ws/src
<span class="token function">git</span> clone --depth <span class="token number">1</span> https://github.com/CopterExpress/clover
<span class="token function">git</span> clone --depth <span class="token number">1</span> https://github.com/CopterExpress/ros_led
<span class="token function">git</span> clone --depth <span class="token number">1</span> https://github.com/ethz-asl/mav_comm
</code></pre></div><p>Install all dependencies using <code>rosdep</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/catkin_ws
<span class="token function">sudo</span> rosdep init
rosdep update
rosdep <span class="token function">install</span> --from-paths src --ignore-src -y
</code></pre></div><p>Install Python dependencies:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> /usr/bin/python3 -m pip <span class="token function">install</span> -r ~/catkin_ws/src/clover/clover/requirements.txt
</code></pre></div><h2 id="get-px4-sources" tabindex="-1"><a class="header-anchor" href="#get-px4-sources" aria-hidden="true">#</a> Get PX4 sources</h2><p>PX4 will be built along with the other packages in our workspace. You may clone it directly into the workspace or put it somewhere and symlink to <code>~/catkin_ws/src</code>. We will need to put its <code>sitl_gazebo</code> and <code>mavlink</code> submodules into <code>~/catkin_ws/src</code> as well.</p><p>Clone PX4 sources and make the required symlinks:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">git</span> clone --recursive --depth <span class="token number">1</span> --branch v1.12.0 https://github.com/PX4/PX4-Autopilot.git ~/PX4-Autopilot
<span class="token function">ln</span> -s ~/PX4-Autopilot ~/catkin_ws/src/
<span class="token function">ln</span> -s ~/PX4-Autopilot/Tools/sitl_gazebo ~/catkin_ws/src/
<span class="token function">ln</span> -s ~/PX4-Autopilot/mavlink ~/catkin_ws/src/
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You may use more recent PX4 version, but there would be more risk of something would not be working.</p></div><h2 id="install-px4-prerequisites" tabindex="-1"><a class="header-anchor" href="#install-px4-prerequisites" aria-hidden="true">#</a> Install PX4 prerequisites</h2><p>PX4 comes with its own script for dependency installation. We may as well leverage it:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/catkin_ws/src/PX4-Autopilot/Tools/setup
<span class="token function">sudo</span> ./ubuntu.sh
</code></pre></div><p>This will install everything required to build PX4 and its SITL environment.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>You may want to skip installing the ARM toolchain if you&#39;re not planning on compiling PX4 for your flight controller. To do this, use the <code>--no-nuttx</code> flag: <code>sudo ./ubuntu.sh --no-nuttx</code>.</p></div><p>Install more required Python packages:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>pip3 <span class="token function">install</span> --user toml
</code></pre></div><h2 id="add-the-clover-airframe" tabindex="-1"><a class="header-anchor" href="#add-the-clover-airframe" aria-hidden="true">#</a> Add the Clover airframe</h2><p>Add the Clover airframe to PX4 using the command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">ln</span> -s ~/catkin_ws/src/clover/clover_simulation/airframes/* ~/PX4-Autopilot/ROMFS/px4fmu_common/init.d-posix/airframes/
</code></pre></div><h2 id="install-geographiclib-datasets" tabindex="-1"><a class="header-anchor" href="#install-geographiclib-datasets" aria-hidden="true">#</a> Install geographiclib datasets</h2><p><code>mavros</code> package requires geographiclib datasets to be present:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> /opt/ros/noetic/lib/mavros/install_geographiclib_datasets.sh
</code></pre></div><h2 id="build-the-simulator" tabindex="-1"><a class="header-anchor" href="#build-the-simulator" aria-hidden="true">#</a> Build the simulator</h2><p>Build your workspace:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/catkin_ws
catkin_make
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>If building fails with RAM issues (<code>c++: fatal error: Killed signal terminated program cc1plus</code>), reduce the number of parallel jobs using <code>-j</code> key. For example, to use only two parallel jobs use <code>catkin_make -j2</code> command.</p></div><h2 id="run-the-simulator" tabindex="-1"><a class="header-anchor" href="#run-the-simulator" aria-hidden="true">#</a> Run the simulator</h2><p>In order to be sure that everything was built correctly, try running the simulator for the first time:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>roslaunch clover_simulation simulator.launch
</code></pre></div><p>You can test autonomous flight using example scripts in <code>~/catkin_ws/src/clover/clover/examples</code> directory.</p><h2 id="additional-steps" tabindex="-1"><a class="header-anchor" href="#additional-steps" aria-hidden="true">#</a> Additional steps</h2><p>Optionally, install roscore systemd service to have roscore running in background:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sed</span> -i <span class="token string">&quot;s/pi/<span class="token environment constant">$USER</span>/g&quot;</span> ~/catkin_ws/src/clover/builder/assets/roscore.service
<span class="token function">sudo</span> <span class="token function">cp</span> ~/catkin_ws/src/clover/builder/assets/roscore.service /etc/systemd/system
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> roscore
<span class="token function">sudo</span> systemctl start roscore
</code></pre></div><p>Install any web server to serve Clover&#39;s web tools (<code>~/.ros/www</code> directory), e. g. Monkey:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">wget</span> https://github.com/CopterExpress/clover_vm/raw/master/assets/packages/monkey_1.6.9-1_<span class="token variable"><span class="token variable">$(</span>dpkg --print-architecture<span class="token variable">)</span></span>.deb -P /tmp
<span class="token function">sudo</span> dpkg -i /tmp/monkey_*.deb
<span class="token function">sed</span> <span class="token string">&quot;s/pi/<span class="token environment constant">$USER</span>/g&quot;</span> ~/catkin_ws/src/clover/builder/assets/monkey <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/monkey/sites/default
<span class="token function">sudo</span> <span class="token function">sed</span> -i <span class="token string">&#39;s/SymLink Off/SymLink On/&#39;</span> /etc/monkey/monkey.conf
<span class="token function">sudo</span> <span class="token function">cp</span> ~/catkin_ws/src/clover/builder/assets/monkey.service /etc/systemd/system/monkey.service
<span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> monkey
<span class="token function">sudo</span> systemctl start monkey
</code></pre></div>`,44);function I(X,C){const a=o("ExternalLinkIcon");return c(),i(l,null,[d,u,s("div",h,[m,s("p",null,[g,s("a",k,[b,n(a)]),f])]),v,_,s("p",null,[w,s("a",y,[x,n(a)]),P]),q],64)}var S=t(p,[["render",I],["__file","simulation_native.html.vue"]]);export{S as default};
