import{_ as i,r as c,o as p,c as r,a as e,b as t,w as s,F as u,d as n,e as o}from"./app.4f6a4bec.js";const d={},h=e("h1",{id:"step-by-step-guide-on-autonomous-flight-with-clover-4",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#step-by-step-guide-on-autonomous-flight-with-clover-4","aria-hidden":"true"},"#"),n(" Step-by-step guide on autonomous flight with Clover 4")],-1),m={class:"custom-container tip"},g=e("p",{class:"custom-container-title"},"TIP",-1),k=n("The following applies to "),f=n("image version"),_=n(),y=e("strong",null,"0.20",-1),b=n(" and up. See "),v={href:"https://github.com/CopterExpress/clover/blob/v0.19/docs/en/auto_setup.md",target:"_blank",rel:"noopener noreferrer"},w=n("previous version of the article"),x=n(" for older images."),q=e("p",null,"This manual contains links to other articles in which each of the topics addressed is discussed in more detail. If you encounter difficulties while reading one of these articles, it is recommended that you return to this manual, since many operations here are described step by step and some unnecessary steps are skipped.",-1),T=e("h2",{id:"raspberry-pi-initial-setup",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#raspberry-pi-initial-setup","aria-hidden":"true"},"#"),n(" Raspberry Pi initial setup")],-1),I=n("Install Raspberry Pi and a camera on the drone according to the "),C=n("manual"),S=n("."),P=n("Download the system image "),R=n("here"),A=n("."),F=e("li",null,[e("p",null,"Burn the image to the microSD card.")],-1),B=e("li",null,[e("p",null,"Insert the card into Raspberry Pi.")],-1),E=e("li",null,[e("p",null,"Connect power to Raspberry Pi and wait for the Wi-Fi network to appear. To do this, connect the Raspberry Pi to the computer via the microUSB cable. \xA0\xA0 On Raspberry Pi, the green LED should flash blink. It shows that Raspberry Pi works properly."),e("blockquote",null,[e("p",null,[e("strong",null,"Warning"),n(" Before connecting the Raspberry Pi to the computer via USB, you need to remove the 5V power cable from Raspberry Pi. Otherwise, there may be problems with power.")])])],-1),L=n("Connect to Wi-Fi and open the web interface ("),W=n("this article"),Y=n(")."),N=e("p",null,"After the first power-up, the network appears with a delay. You need to wait until the system is fully loaded. If the Clover network does not appear in the list of networks for a long time, reopen the window with the network selection. Then the list of networks will be updated.",-1),O={class:"custom-container tip"},D=e("p",{class:"custom-container-title"},"TIP",-1),U=n("Now if you have connected to the Clover's Wi-Fi network, it is recommended to open the "),H={href:"http://192.168.11.1/docs/ru/auto_setup.html",target:"_blank",rel:"noopener noreferrer"},V=n("local version of this guide"),z=n(", otherwise the links will not work."),G=e("ul",null,[e("li",null,"Connect to Raspberry Pi via SSH.")],-1),M=n("Web access is the easiest way. Follow the instructions in the article "),j=n("SSH Access"),Z=n("."),Q=n('You can change the name and password of the network if you want to. See the article "[Network Settings] ('),X={href:"http://network.md",target:"_blank",rel:"noopener noreferrer"},J=n("network.md"),$=n(' # change-password-or-ssid-network-name)". The remaining operations with the network are unnecessary.'),K=n("Use the nano editor to edit files. "),ee=n("Instructions for working with nano"),ne=n("."),te=e("blockquote",null,[e("p",null,[e("strong",null,"Hint"),n(" In nano, you can only move the cursor with the arrow keys on the keyboard.")])],-1),ae=e("li",null,[e("p",null,"Reboot Raspberry Pi:"),e("div",{class:"language-bash ext-sh"},[e("pre",{class:"language-bash"},[e("code",null,[e("span",{class:"token function"},"sudo"),n(),e("span",{class:"token function"},"reboot"),n(`
`)])])]),e("p",null,"The connection will temporary close, a new network will be created and you will need to reconnect to it.")],-1),se=n("Make sure that the camera is working correctly. Follow the link "),oe={href:"http://192.168.11.1:8080",target:"_blank",rel:"noopener noreferrer"},le=n("http://192.168.11.1:8080"),ce=n(" and click "),ie=e("code",null,"image_raw",-1),pe=n("."),re=n('For more information read "'),ue=n("Viewing images from cameras"),de=n('".'),he=e("p",null,"If the image is blurry, you need to focus the lens. To do this, twist the lens in one or the other direction. Continue to twist until the image becomes clear.",-1),me=e("blockquote",null,[e("p",null,[e("strong",null,"Hint"),n(" The red LED on the camera should be lit: it means that the camera is currently capturing image. If the LED does not light: either the camera is connected incorrectly, or the operating system did not boot yet, or there is an error in settings.")])],-1),ge=o(`<h2 id="basic-commands" tabindex="-1"><a class="header-anchor" href="#basic-commands" aria-hidden="true">#</a> Basic commands</h2><p>You will need the basic Linux commands, as well as special Clover commands, to work efficiently in the system.</p><p>Show list of files and folders:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">ls</span>
</code></pre></div><p>Go to certain directory by entering the path too it (catkin_ws/src/clover/clover/launch/):</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> catkin_ws/src/clover/clover/launch/
</code></pre></div><p>Go to home directory:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span>
</code></pre></div><p>Open the file <code>file.py</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">nano</span> file.py
</code></pre></div><p>Open the file clover.launch by entering the full path to it (it works even if you&#39;re in a different directory):</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">nano</span> ~/catkin_ws/src/clover/clover/launch/clover.launch
</code></pre></div><p>Save file (press sequentially):</p><div class="language-bash ext-sh"><pre class="language-bash"><code>Ctrl+X<span class="token punctuation">;</span> Y<span class="token punctuation">;</span> Enter
</code></pre></div><p>Delete a file or folder called <code>name</code> (WARNING: the operation will not request confirmation. Be careful!):</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">rm</span> -rf name
</code></pre></div><p>Make a new directory called <code>myfolder</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">mkdir</span> myfolder
</code></pre></div><p>Raspberry Pi complete reboot:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">reboot</span>
</code></pre></div><p>Reboot only the <code>clover</code> service:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart clover
</code></pre></div><p>Perform selfcheck:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>rosrun clover selfcheck.py
</code></pre></div><p>Stop a program:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>Ctrl+C
</code></pre></div><p>Start a program <code>myprogram.py</code> using Python:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>python3 myprogram.py
</code></pre></div><p>Journal of the events related to <code>clover</code> package. Scroll the list by pressing Enter or Ctrl+V (scrolls faster):</p><div class="language-bash ext-sh"><pre class="language-bash"><code>journalctl -u clover
</code></pre></div><p>Open the sudoers file with super user rights (this particular file doesn&#39;t open without sudo. You can use sudo to open other locked files or run programs that require super user rights):</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">nano</span> /etc/sudoers
</code></pre></div><h2 id="setting-raspberry-pi-for-autonomous-flight" tabindex="-1"><a class="header-anchor" href="#setting-raspberry-pi-for-autonomous-flight" aria-hidden="true">#</a> Setting Raspberry Pi for autonomous flight</h2><p>Most of the parameters for autonomous flight are located in the following directory: <code>~/catkin_ws/src/clover/clover/launch/</code>.</p><ul><li><p>Enter the directory:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> ~/catkin_ws/src/clover/clover/launch/
</code></pre></div><p>The <code>~</code> symbol stands for home directory of your user. If you are already in the directory, you can go with just the command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> catkin_ws/src/clover/clover/launch/
</code></pre></div><blockquote><p><strong>Hint</strong> Tab can automatically complete the names of files, folders or commands. You need to start entering the desired name and press Tab. If there are no conflicts, the name will be auto completed. For example, to quickly enter the path to the <code>catkin_ws/src/clover/clover/launch/</code> directory, after entering <code>cd</code>, you can start typing the following key combination:<code>c-Tab-s-Tab-c-Tab-c-Tab-l-Tab</code>. This way you can save a lot of time when writing a long command, and also avoid possible mistakes in writing the path.</p></blockquote></li><li><p>In this folder you need to configure three files:</p><ul><li><code>clover.launch</code></li><li><code>aruco.launch</code></li><li><code>main_camera.launch</code></li></ul></li><li><p>Open the file <code>clover.launch</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">nano</span> clover.launch
</code></pre></div><p>You must be in the directory in which the file is located. If you are in other directory, you can open the file by writing the full path to it:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">nano</span> ~/catkin_ws/src/clover/clover/launch/clover.launch
</code></pre></div><p>If two users are editing a file at the same time, or if previously the file was closed incorrectly, nano will not display the file contents, it will ask for permission to display the file. To grant permission, press Y.</p></li></ul><p>If the content of a file is still empty, you may have entered the file name incorrectly. You need to pay attention to the extension. If you entered a wrong name or extension, nano will create a new empty file named this way, which is undesirable. Such file should be deleted.</p>`,36),ke=o(`<li><p>Find the following line in clover.launch file:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>false<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>Replace <code>false</code> with <code>true</code>:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>.
</code></pre></div><p>This will activate the ArUco marker detection module.</p></li><li><p>Open the file <code>aruco.launch</code>:</p><div class="language-bash ext-sh"><pre class="language-bash"><code> <span class="token function">nano</span> aruco.launch
</code></pre></div></li>`,2),fe=n("Here you need to activate some parameters. Go to the "),_e=n("article"),ye=n(" for more detail."),be=o(`<p>Here is what you should get:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco_detect<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco_map<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>aruco_vpe<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>\`
</code></pre></div>`,2),ve=o(`<li><p>Generate the ArUco markers field. See the article [Map-based navigation with ArUco markers] (aruco_map.md # marker map settings) for details. To generate markers, you need to enter a command with specific values.</p><p>Here is the example generating command where:</p><ul><li>marker length = 0.335 m (<code>length</code>)</li><li>10 columns (x)</li><li>10 rows (y)</li><li>distance between markers on the x axis = 1 m (<code>dist_x</code>)</li><li>distance between markers on the y axis = 1 m (<code>dist_y</code>)</li><li>the first marker&#39;s ID = 0 (<code>first</code>)</li><li>the marker map name is default: map.txt</li><li>the marker map numbering is from the top left corner (key <code>--top-left</code>)</li></ul><div class="language-bash ext-sh"><pre class="language-bash"><code>rosrun aruco_pose genmap.py <span class="token number">0.335</span> <span class="token number">10</span> <span class="token number">10</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token operator">&gt;</span> ~/catkin_ws/src/clover/aruco_pose/map/map.txt --top-left
</code></pre></div><p>In most maps, numbering starts with a zero marker. Also, in most cases, numbering starts from the upper left corner, so when generating, it is very important to enter the key <code>--top-left</code>.</p><blockquote><p><strong>Hint</strong> If you choose a different name for your ArUco map, you also need to change it in the <code>aruco.launch</code>. Find the line <code>&lt;param name=&quot;map&quot; value=&quot;$(find aruco_pose)/map/map.txt&quot;/&gt;</code> and replace map.txt with your map name.</p></blockquote></li>`,1),we=e("p",null,[n("Edit the "),e("code",null,"main_camera.launch"),n(" for setting up the camera:")],-1),xe=n('Read more in the article. "'),qe=n("Camera orientation"),Te=n('".'),Ie=o(`<p>In this file, you need to edit the line with the camera location parameters. The line looks like this:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tf2_ros<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static_transform_publisher<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main_camera_frame<span class="token punctuation">&quot;</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>In the file you will find many lines similar to this, but most of them are commented out (i.e. not readable) and only one is uncommented. These are pre-configured settings from which you can choose the one you need.</p><p>Comment in XML is <code>&lt;!--</code> at the beginning of a line and <code>--&gt;</code> at the end of a line. An example of a commented line:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token comment">&lt;!--&lt;node pkg=&quot;tf2_ros&quot; type=&quot;static_transform_publisher&quot; name=&quot;main_camera_frame&quot; args=&quot;0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical&quot;/&gt;--&gt;</span>
</code></pre></div><p>An example of an uncommented line (the line will be read by the program):</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>node</span> <span class="token attr-name">pkg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>tf2_ros<span class="token punctuation">&quot;</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>static_transform_publisher<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>main_camera_frame<span class="token punctuation">&quot;</span></span> <span class="token attr-name">args</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>0.05 0 -0.07 -1.5707963 0 3.1415926 base_link main_camera_optical<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><p>The writing above each of these lines indicates which camera position the line corresponds to. If the camera cable goes forward relative to the drone, and the camera is pointing down, you need to select the following setting:</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token comment">&lt;!-- camera is oriented downward, camera cable goes forward  [option 2] --&gt;</span>
</code></pre></div><p>To select the desired setting, you need to uncomment the corresponding line, and comment out another similar line so that there are no conflicts.</p>`,10),Ce=o(`<li><p>Save changes. Press sequentially:</p><div class="language-text ext-text"><pre class="language-text"><code>Ctrl+x; y; Enter
</code></pre></div></li><li><p>Restart the <code>clover</code> service:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl restart clover
</code></pre></div></li>`,2),Se=e("h2",{id:"setting-the-flight-controller",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#setting-the-flight-controller","aria-hidden":"true"},"#"),n(" Setting the flight controller")],-1),Pe=n("Flash the flight controller with modified firmware. You can download it "),Re=n("here"),Ae=n(' in the section "Flashing the flight controller".'),Fe=e("li",null,[e("p",null,"Instructions for flashing and calibrating the flight controller are in the same article.")],-1),Be=e("div",{class:"custom-container warning"},[e("p",{class:"custom-container-title"},"WARNING"),e("p",null,"Don't forget to choose the downloaded firmware when you flash the flight controller.")],-1),Ee=e("h2",{id:"connecting-the-flight-controller-with-raspberry-pi",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#connecting-the-flight-controller-with-raspberry-pi","aria-hidden":"true"},"#"),n(" Connecting the flight controller with Raspberry Pi")],-1),Le=e("li",null,[e("p",null,"Connect the Raspberry Pi and the Pixracer via the microUSB cable. The cable should be tightly fastened and passed through the bottom of the drone to not get into the propellers.")],-1),We=e("p",null,"Connect remotely to the flight controller through QGroundControl.",-1),Ye=n("All the necessary settings for that are already set in Clover. Now you need to create a new connection in QGroundControl. Use the settings from "),Ne=n("this article"),Oe=n("."),De=e("h2",{id:"remote-controller-setup",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#remote-controller-setup","aria-hidden":"true"},"#"),n(" Remote controller setup")],-1),Ue=n('Flight modes setup is described in the article "'),He=n("Flight modes"),Ve=n('".'),ze=e("p",null,"Set channel 5 to SwC switch; channel 5 to SwA switch. Or you can use any other switches you like.",-1),Ge=e("h2",{id:"clover-selfcheck",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#clover-selfcheck","aria-hidden":"true"},"#"),n(" Clover selfcheck")],-1),Me=n('Perform selfcheck when you have set up your drone or when you have faced problems. The selfcheck process is described in the article "'),je=n("Automated self checks"),Ze=n('"'),Qe=e("ul",null,[e("li",null,[e("p",null,"Run the command:"),e("div",{class:"language-bash ext-sh"},[e("pre",{class:"language-bash"},[e("code",null,`rosrun clover selfcheck.py
`)])])])],-1),Xe=e("h2",{id:"writing-a-program",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#writing-a-program","aria-hidden":"true"},"#"),n(" Writing a program")],-1),Je=n('The article "'),$e=n("Simple OFFBOARD"),Ke=n('" describes working with '),en=e("code",null,"simple_offboard",-1),nn=n(" module that helps to easily program a drone. All the basic flight functions are described in this article, as well as code snippets."),tn=o(`<ul><li><p>Copy the Python code example from &quot;The use of Python language&quot; section and paste in code editor (e.g. Visual Studio Code, PyCharm, Sublime Text, Notepad++)</p></li><li><p>Save the document with .py extension for highlighting the code.</p></li><li><p>Add flight logic. The examples of such functions are given in the article. You need to call functions for taking off, flying to point and landing.</p></li><li><p>Taking off.</p><p>Use <code>navigate</code> function to take off. Add this line at the bottom of the program.</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> auto_arm<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
</code></pre></div><p>Add this line to add delay to the program. It gives you time for doing previously called operation.</p><div class="language-python ext-py"><pre class="language-python"><code>rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre></div></li></ul><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>It is important to allocate time to execute the <code>navigate</code> function, otherwise the drone, without waiting for the previous command to execute, will immediately proceed to the next. For allocating time, use the <code>rospy.sleep ()</code> command. The time in seconds is indicated in parentheses. The function <code>rospy.sleep ()</code> refers to the previous <code>navigate</code> command, and not to the next. This is the time we give to fly to the point indicated in previous <code>navigate</code> (the one that is just above the <code>rospy.sleep ()</code> ).</p></div><ul><li><p>Set the drone&#39;s position in the marker field coordinate system.</p><p>For doing that you need to call a <code>navigate</code>, set the coordinates and coordinate system (<code>frame_id</code>):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_map&#39;</span><span class="token punctuation">)</span>
</code></pre></div></li><li><p>As the result you get:</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">,</span> auto_arm<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span><span class="token string">&#39;aruco_map&#39;</span><span class="token punctuation">)</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>
</code></pre></div><blockquote><p><strong>Warning</strong> Note that the parameter <code>auto_arm=True</code> is only set once on the first takeoff. In other cases it should not be set True because it prevents overtaking the control.</p></blockquote></li><li><p>If you want to add other points for the drone&#39;s mission, add another <code>navigate</code> and <code>rospy.sleep()</code>. Calculate time individually for each point, depending on the speed of flight and the distance between two points.</p><p>If you want to add the points with coordinates (3, 3, 1.5):</p><div class="language-python ext-py"><pre class="language-python"><code>navigate<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> y<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> z<span class="token operator">=</span><span class="token number">1.5</span><span class="token punctuation">,</span> speed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> frame_id<span class="token operator">=</span>\u2018aruco_map\u2019<span class="token punctuation">)</span>
rospy<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre></div><blockquote><p><strong>Warning</strong> Coordinates should not exceed the size of your field. If the field is 4x4 meters in size, the maximum coordinate value is 4.</p></blockquote></li><li><p>After reaching all of the points you need to land. The following line is placed at the end of the program:</p><div class="language-text ext-text"><pre class="language-text"><code>land()
</code></pre></div></li></ul><h2 id="writing-the-program-to-the-drone" tabindex="-1"><a class="header-anchor" href="#writing-the-program-to-the-drone" aria-hidden="true">#</a> Writing the program to the drone</h2><p>The easiest way to send the program is to copy the content of the program, create a new file in the command line and paste the program text into the file.</p><ul><li><p>To create the file <code>myprogram.py</code>, run the command:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">nano</span> myprogram.py
</code></pre></div><p>You can select any name you want, but it is not recommended to use spaces and special characters. In addition, the program extension should always end with <code>.py</code></p></li><li><p>Paste text in the input field. If you use Butterfly web access on Windows or Linux:</p><div class="language-text ext-text"><pre class="language-text"><code>Ctrl+Shift+V
</code></pre></div><p>On Mac you can click <code>Cmd+v</code>.</p></li><li><p>Save the file:</p><div class="language-text ext-text"><pre class="language-text"><code>Ctrl+x; Y; Enter
</code></pre></div></li></ul><h2 id="starting-the-program" tabindex="-1"><a class="header-anchor" href="#starting-the-program" aria-hidden="true">#</a> Starting the program</h2><ul><li><p>It is necessary to carefully prepare the drone, remote control and program before you fly autonomously. Run <code>selfcheck.py</code>. Make sure the drone flies well in manual mode.</p></li><li><p>Turn on the drone and wait for the system to boot. A red light on the camera means that the system has booted.</p></li><li><p>Check drone&#39;s flight in POSCTL mode.</p></li><li><p>To do this, take off above the markers in STABILIZED mode and turn the SwC switch (or the one you have set) to the lower position - POSCTL mode.</p><blockquote><p><strong>Warning</strong> You need to be ready to immediately switch back to STABILIZED mode if the drone gets out of control!</p></blockquote><p>Set the left stick (throttle) to the middle position. The drone has to hover in place. If so, you can land the drone and proceed to the next step. If not, you need to find the reason for the problem.</p></li><li><p>Before you start your program, set the SwC switch to the middle position. It will help you to take control of the drone. For taking control, switch your mode switch (SwC by default) to any other flight mode.</p></li><li><p>Set the left stick (throttle) to the middle position so that in case of taking control the drone won&#39;t fall down.</p></li><li><p>Run the program:</p><div class="language-bash ext-sh"><pre class="language-bash"><code>python3 my_program.py
</code></pre></div><blockquote><p><strong>Warning</strong> After completion of the program , the drone can land incorrectly and continue to fly over the floor. In this case, you need to intercept control.</p></blockquote></li><li><p>If you want to stop the program before it ends, press <code>Ctrl+C</code>. If didn&#39;t work, press <code>Ctrl+Z</code>, but it is not recommended.</p></li></ul>`,8);function an(sn,on){const a=c("RouterLink"),l=c("ExternalLinkIcon");return p(),r(u,null,[h,e("div",m,[g,e("p",null,[k,t(a,{to:"/en/image.html"},{default:s(()=>[f]),_:1}),_,y,b,e("a",v,[w,t(l)]),x])]),q,T,e("ul",null,[e("li",null,[e("p",null,[I,t(a,{to:"/en/assemble_4_2.html#installing-the-raspberry-pi"},{default:s(()=>[C]),_:1}),S])]),e("li",null,[e("p",null,[P,t(a,{to:"/en/image.html"},{default:s(()=>[R]),_:1}),A])]),F,B,E,e("li",null,[e("p",null,[L,t(a,{to:"/en/wifi.html"},{default:s(()=>[W]),_:1}),Y])])]),N,e("div",O,[D,e("p",null,[U,e("a",H,[V,t(l)]),z])]),G,e("p",null,[M,t(a,{to:"/en/ssh.html"},{default:s(()=>[j]),_:1}),Z]),e("ul",null,[e("li",null,[e("p",null,[Q,e("a",X,[J,t(l)]),$])]),e("li",null,[e("p",null,[K,t(a,{to:"/en/cli.html#editing"},{default:s(()=>[ee]),_:1}),ne]),te]),ae,e("li",null,[e("p",null,[se,e("a",oe,[le,t(l)]),ce,ie,pe]),e("p",null,[re,t(a,{to:"/en/web_video_server.html"},{default:s(()=>[ue]),_:1}),de]),he,me])]),ge,e("ul",null,[ke,e("li",null,[e("p",null,[fe,t(a,{to:"/en/aruco_map.html"},{default:s(()=>[_e]),_:1}),ye]),be]),ve,e("li",null,[we,e("p",null,[xe,t(a,{to:"/en/camera_setup.html"},{default:s(()=>[qe]),_:1}),Te]),Ie]),Ce]),Se,e("ul",null,[e("li",null,[e("p",null,[Pe,t(a,{to:"/en/setup.html"},{default:s(()=>[Re]),_:1}),Ae])]),Fe]),Be,Ee,e("ul",null,[Le,e("li",null,[We,e("p",null,[Ye,t(a,{to:"/en/gcs_bridge.html"},{default:s(()=>[Ne]),_:1}),Oe])])]),De,e("ul",null,[e("li",null,[e("p",null,[Ue,t(a,{to:"/en/modes.html"},{default:s(()=>[He]),_:1}),Ve]),ze])]),Ge,e("p",null,[Me,t(a,{to:"/en/selfcheck.html"},{default:s(()=>[je]),_:1}),Ze]),Qe,Xe,e("p",null,[Je,t(a,{to:"/en/simple_offboard.html"},{default:s(()=>[$e]),_:1}),Ke,en,nn]),tn],64)}var cn=i(d,[["render",an],["__file","auto_setup.html.vue"]]);export{cn as default};
