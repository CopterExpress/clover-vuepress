import{_ as g,r,o as f,c as k,a as t,b as o,w as a,F as b,d as e,e as n}from"./app.4f6a4bec.js";import{_ as v,a as w,b as x,c as l,d as c,e as d,f as h,g as _,h as p,i as u,j as m}from"./random-color.9e44d1dc.js";const y={},T=l+" 2x",I=c+" 2x",P=d+" 2x",C=h+" 2x",G=_+" 2x",S=p+" 2x",L=u+" 2x",B=m+" 2x",O=t("h1",{id:"blocks-programming-for-clover",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#blocks-programming-for-clover","aria-hidden":"true"},"#"),e(" Blocks programming for Clover")],-1),R=t("img",{src:v,width:"200",align:"right"},null,-1),q=e("Visual blocks programming feature has been added to the "),E=e("RPi image"),N=e(", starting with the version "),W=t("strong",null,"0.21",-1),A=e(". Blocks programming is implemented using "),D={href:"https://developers.google.com/blockly",target:"_blank",rel:"noopener noreferrer"},F=e("Google Blockly"),V=e(" platform. Blocks programming integration can lower the entry barrier to a minimum."),U=t("h2",{id:"configuration",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#configuration","aria-hidden":"true"},"#"),e(" Configuration")],-1),Y=e("For correct work of the blocks programming, "),j=t("code",null,"blocks",-1),z=e(" argument in the Clover launch-file ("),M=t("code",null,"~/catkin_ws/src/clover/clover/launch/clover.launch",-1),X=e(") "),H=e("should be equal to"),J=e(),K=t("code",null,"true",-1),Q=e(":"),Z=n(`<div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>blocks<span class="token punctuation">&quot;</span></span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>true<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
</code></pre></div><h2 id="running" tabindex="-1"><a class="header-anchor" href="#running" aria-hidden="true">#</a> Running</h2>`,2),$=e("To run Clover's blocks programming interface, "),ee=e("connect to Clover's Wi-Fi"),te=e(" and go to web-page "),oe={href:"http://192.168.11.1/clover_blocks/",target:"_blank",rel:"noopener noreferrer"},se=e("http://192.168.11.1/clover_blocks/"),ae=e(" or click the link "),ne=t("em",null,"Blocks programming",-1),ie=e(" at the "),re=e("main page"),le=e("."),ce=n('<p>The page looks as follows:</p><img src="'+w+'" width="600" class="center"><p>Assemble your program using blocks in the menu at the left and then click <em>Run</em> button for running. You can also view generated Python-code, switching to <em>Python</em> tab.</p><p>The <em>Stop</em> button stops the program. Clicking <em>Land</em> button also stops the program and lands the drone.</p><h2 id="storing-and-loading" tabindex="-1"><a class="header-anchor" href="#storing-and-loading" aria-hidden="true">#</a> Storing and loading</h2><img src="'+x+'" width="300" align="right"><p>To store the program, open the menu at the top right, select <em>Save</em> item and input your program&#39;s name. The name should contain only Latin characters, hyphen, underline and dot characters. All your stored programs are available at the same menu.</p><p>Your programs are stored as XML-files in the <code>/catkin_ws/src/clover/clover_blocks/programs/</code> directory of the SD-card.</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Note also example programs, available at the same menu.</p></div><h2 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks" aria-hidden="true">#</a> Blocks</h2>',10),de=e("The set of blocks is somewhat similar to the set of ROS-services of "),he=e("Clover's autonomous flights API"),_e=e(". This section contains descriptions of some of them."),pe=t("p",null,"Clover's blocks are separated into 4 categories:",-1),ue=t("li",null,[t("span",{style:{padding:"2px",color:"white",background:"#9d5ca6"}},"Flight"),e(" \u2013 autonomous flight related commands.")],-1),me=t("li",null,[t("span",{style:{padding:"2px",color:"white",background:"#ff9b00"}},"State"),e(" \u2013 blocks for obtaining the drone state parameters.")],-1),ge=t("span",{style:{padding:"2px",color:"white",background:"#01d754"}},"LED",-1),fe=e(" \u2013 blocks for controlling "),ke=e("LED strip"),be=e("."),ve=t("span",{style:{padding:"2px",color:"white",background:"#5b97cc"}},"GPIO",-1),we=e(" \u2013 blocks for working with "),xe=e("GPIO pins"),ye=e("."),Te=n('<p>The rest of categories contains standard Blockly&#39;s blocks.</p><h3 id="take-off" tabindex="-1"><a class="header-anchor" href="#take-off" aria-hidden="true">#</a> take_off</h3><img src="'+l+'" srcset="'+T+'"><p>Take off to specified altitude in meters. The altitude may be an arbitrary block, that returns a number.</p><p>The <code>wait</code> flag specifies, if the drone should wait until take off is complete, before executing the next block.</p><h3 id="navigate" tabindex="-1"><a class="header-anchor" href="#navigate" aria-hidden="true">#</a> navigate</h3><img src="'+c+'" srcset="'+I+'"><p>Navigate to specified point. Coordinates are specified in meters.</p><p>The <code>wait</code> flag specifies, if the drone should wait until navigation is complete, before executing the next block.</p><h4 id="relative_to" tabindex="-1"><a class="header-anchor" href="#relative_to" aria-hidden="true">#</a> <em>Relative to</em> field</h4>',10),Ie=e("This block allows to specify the "),Pe=e("coordinate frame"),Ce=e(" of the target point:"),Ge=t("li",null,[t("em",null,"body"),e(" \u2013 coordinates, relative to the drone: "),t("em",null,"forward"),e(", "),t("em",null,"left"),e(", "),t("em",null,"up"),e(".")],-1),Se=t("em",null,"markers map",-1),Le=e(" \u2013 coordinates, relative to the "),Be=e("map of ArUco-markers"),Oe=e("."),Re=t("em",null,"marker",-1),qe=e(" \u2013 coordinates, relative to an "),Ee=e("ArUco-marker"),Ne=e("; marker's ID input fields appears."),We=t("li",null,[t("em",null,"last navigate target"),e(" \u2013 coordinates, relative to the last specified navigate point.")],-1),Ae=t("li",null,[t("em",null,"map"),e(" \u2013 drone's local coordinate system, linked with the point of its initialization.")],-1),De=t("li",null,[t("em",null,"global"),e(" \u2013 global coordinates system (latitude and longitude) and relative altitude.")],-1),Fe=t("em",null,"global, WGS 84 alt.",-1),Ve=e(" \u2013 global coordinates system and "),Ue={href:"https://en.wikipedia.org/wiki/WGS_84",target:"_blank",rel:"noopener noreferrer"},Ye=e("WGS 84"),je=e(" altitude."),ze=n('<h3 id="land" tabindex="-1"><a class="header-anchor" href="#land" aria-hidden="true">#</a> land</h3><img src="'+d+'" srcset="'+P+'"><p>Land the drone.</p><p>The <code>wait</code> flag specifies, if the drone should wait until landing is complete, before executing the next block.</p><h3 id="wait" tabindex="-1"><a class="header-anchor" href="#wait" aria-hidden="true">#</a> wait</h3><img src="'+h+'" srcset="'+C+'"><p>Wait specified time period in seconds. The time period may be an arbitrary block, that returns a number.</p><h3 id="wait-arrival" tabindex="-1"><a class="header-anchor" href="#wait-arrival" aria-hidden="true">#</a> wait_arrival</h3><img src="'+_+'" srcset="'+G+'"><p>Wait, until the drone reaches <a href="#navigate">navigate</a>-block&#39;s target point.</p><h3 id="get-position" tabindex="-1"><a class="header-anchor" href="#get-position" aria-hidden="true">#</a> get_position</h3><img src="'+p+'" srcset="'+S+'"><p>The block returns current position, velocity or yaw angle of the drone relative to the specified <a href="#relative_to">coordinate frame</a>.</p><h3 id="set-effect" tabindex="-1"><a class="header-anchor" href="#set-effect" aria-hidden="true">#</a> set_effect</h3><img src="'+u+'" srcset="'+L+'">',15),Me=e("The block allows to set animations to LED strip, similarly to "),Xe=t("code",null,"set_effect",-1),He=e(" ROS-service."),Je=n('<p>Example of using the block with a random color (colors-related blocks are located in <em>Colour</em> category):</p><img src="'+m+'" srcset="'+B+`"><h3 id="GPIO" tabindex="-1"><a class="header-anchor" href="#GPIO" aria-hidden="true">#</a> Work with GPIO</h3><p><span style="padding:2px;color:white;background:#5b97cc;">GPIO</span> category contains blocks for working with GPIO. Note, that for correct work of these blocks, <code>pigpiod</code> daemon should be running:</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> pigpiod.service
<span class="token function">sudo</span> systemctl start pigpiod.service
</code></pre></div>`,5),Ke=e("See details on GPIO in the "),Qe=e("appropriate article"),Ze=e(".");function $e(et,tt){const s=r("RouterLink"),i=r("ExternalLinkIcon");return f(),k(b,null,[O,R,t("p",null,[q,o(s,{to:"/en/image.html"},{default:a(()=>[E]),_:1}),N,W,A,t("a",D,[F,o(i)]),V]),U,t("p",null,[Y,j,z,M,X,o(s,{to:"/en/cli.html#editing"},{default:a(()=>[H]),_:1}),J,K,Q]),Z,t("p",null,[$,o(s,{to:"/en/wifi.html"},{default:a(()=>[ee]),_:1}),te,t("a",oe,[se,o(i)]),ae,ne,ie,o(s,{to:"/en/wifi.html#web-interface"},{default:a(()=>[re]),_:1}),le]),ce,t("p",null,[de,o(s,{to:"/en/simple_offboard.html"},{default:a(()=>[he]),_:1}),_e]),pe,t("ul",null,[ue,me,t("li",null,[ge,fe,o(s,{to:"/en/leds.html"},{default:a(()=>[ke]),_:1}),be]),t("li",null,[ve,we,o(s,{to:"/en/gpio.html"},{default:a(()=>[xe]),_:1}),ye])]),Te,t("p",null,[Ie,o(s,{to:"/en/frames.html"},{default:a(()=>[Pe]),_:1}),Ce]),t("ul",null,[Ge,t("li",null,[Se,Le,o(s,{to:"/en/aruco_map.html"},{default:a(()=>[Be]),_:1}),Oe]),t("li",null,[Re,qe,o(s,{to:"/en/aruco_marker.html"},{default:a(()=>[Ee]),_:1}),Ne]),We,Ae,De,t("li",null,[Fe,Ve,t("a",Ue,[Ye,o(i)]),je])]),ze,t("p",null,[Me,o(s,{to:"/en/leds.html#set_effect"},{default:a(()=>[Xe]),_:1}),He]),Je,t("p",null,[Ke,o(s,{to:"/en/gpio.html"},{default:a(()=>[Qe]),_:1}),Ze])],64)}var at=g(y,[["render",$e],["__file","blocks.html.vue"]]);export{at as default};
